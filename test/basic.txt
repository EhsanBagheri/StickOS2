first we test parsing and running expressions
1
2
7
5
9
7
15
21
81
3
3
2
8
then we unparse them
  10 print 1
  20 print 1+1
  30 print 1+2*3
  40 print 1*2+3
  50 print (1+2)*3
  60 print 1+2*3
  70 print 1+2*(3+4)
  80 print (1+2)*(3+4)
  90 print (1+2)*(3*(4+5))
 100 print 1+1+1
 110 print 1+(1+1)
 120 print 16/4/2
 130 print 16/(4/2)
end
1
2
7
5
9
7
15
21
81
3
3
2
8
then we test format specifiers
0x14 0x1e dec 20 30
256 512 hex 0x100 0x200
hex 0x14 0x1e dec 20 30
dec 256 512 hex 0x100 0x200
default 512
default 30
then we unparse them
  10 print hex 20, 30, "dec", dec 20, 30
  20 print dec 0x100, 0x200, "hex", hex 0x100, 0x200
  30 print "hex", hex 20, 30, "dec", dec 20, 30
  40 print "dec", dec 0x100, 0x200, "hex", hex 0x100, 0x200
  50 print "default", 0x200
  60 print "default", 30
end
0x14 0x1e dec 20 30
256 512 hex 0x100 0x200
hex 0x14 0x1e dec 20 30
dec 256 512 hex 0x100 0x200
default 512
default 30
then we test operators
3 5
-1 1
6 9
3 2
1 0
3 6
0 2
3 4
1 1 0
0 1 0
1 0 0
4 2
1 0 0
0 1 0
1 0 1
0 1 1
0 0 1
1 1 0
then we unparse them
   1 print 1+2, 3+2
   2 print 1-2, 2-1
   3 print 2*3, 3*3
   4 print 7/2, 7/3
   5 print 7%2, 8%2
   6 print 1|2, 2|6
   7 print 1&2, 2&6
   8 print 1^2, 2^6
   9 print 1||0, 1||1, 0||0
  10 print 1&&0, 1&&1, 0&&0
  11 print 1^^0, 1^^1, 0^^0
  12 print 1<<2, 8>>2
  13 print 1<2, 2<1, 1<1
  14 print 1>2, 2>1, 1>1
  15 print 1<=2, 2<=1, 1<=1
  16 print 1>=2, 2>=1, 1>=1
  17 print 1==2, 2==1, 1==1
  18 print 1!=2, 2!=1, 1!=1
end
3 5
-1 1
6 9
3 2
1 0
3 6
0 2
3 4
1 1 0
0 1 0
1 0 0
4 2
1 0 0
0 1 0
1 0 1
0 1 1
0 0 1
1 1 0
then test unary operators
1 0 -2
0 1 -1
3 1
4 2
2 -2
6 -6
6 -6
1 0 1 0
then we unparse them
   1 print 1, !1, ~1
   2 print 0, !0, ~0
   3 print !1+3, ~1+3
   4 print !0+3, ~0+3
   5 print +2, -2
   6 print 3*+2, 3*-2
   7 print +2*3, -2*3
   8 print !!4, !!0, !!(2+2), !!(2-2)
end
1 0 -2
0 1 -1
3 1
4 2
2 -2
6 -6
6 -6
1 0 1 0
then we test line input
  10 rem line 10
end
  10 rem line 10
  20 rem line 20
end
  10 rem line 10
end
  10 rem line 10
  30 rem line 30
end
  10 rem line 10
  15 rem line 15
  30 rem line 30
end
  10 rem line 10
  15 rem line 15
  30 rem line 30
end
  10 rem new line 10
  15 rem line 15
  30 rem line 30
end
  10 rem new line 10
  15 rem line 15
  30 rem line 30
end
test undo
  15 rem line 15
  30 rem line 30
end
  10 rem new line 10
  15 rem line 15
  30 rem line 30
end
end
then we test some math
  10 dim a
  20 dim r
end
5 0
  10 dim a
  20 dim r
  25 let a = 5
  30 print a, r
  50 print 3+5*6
  60 print (3+5)*6
  70 print 3+5*6, 2, 1
  80 print 3+5*6
 100 dim b, c, d, e
 110 let q = 4+7*(1+1)
 120 let qq = 44+77*(11+11)
 130 print q, qq
end
5 0
33
48
33 2 1
33
var 'q' undefined
STOP at line 110!
   1 dim q, qq
  10 dim a
  20 dim r
  25 let a = 5
  30 print a, r
  50 print 3+5*6
  60 print (3+5)*6
  70 print 3+5*6, 2, 1
  80 print 3+5*6
 100 dim b, c, d, e
 110 let q = 4+7*(1+1)
 120 let qq = 44+77*(11+11)
 130 print q, qq
end
5 0
33
48
33 2 1
33
18 1738
test multiple assignments
  10 dim a, b, c
  20 let a = 5, b = 5+5, c = a+b
  30 print a, b, c
end
5 10 15
test some variable types
   1 dim a as byte
   2 dim b as short
   3 dim c
   4 let c = -1
   5 let b = c
   6 let a = b
   7 print hex a, b, c
   8 let c = 0x10011
   9 let b = 0x10022
  10 let a = 0x10033
  11 print hex a, b, c
end
0xff 0xffff 0xffffffff
0x33 0x22 0x10011
test re-dim errors
   1 dim a as byte
   2 dim a as byte
end
var 'a' already declared at this scope
STOP at line 2!
   1 dim a as short
   2 dim a as short
end
var 'a' already declared at this scope
STOP at line 2!
   1 dim a
   2 dim a
end
var 'a' already declared at this scope
STOP at line 2!
test some assertions
assertion failed
STOP at line 20!
assertion failed
STOP at line 70!
assertion failed
STOP at line 100!
test some more statements
 130 if x+y*2 then
 140 elseif 1 then
 150 else 
 160 endif 
 170 while 1 do
 180 endwhile 
 190 gosub other
 200 return 
end
then test delete
  10 dim a
  20 dim r
  25 let a = 5
  30 print a, r
  50 print 3+5*6
  60 print (3+5)*6
  70 print 3+5*6, 2, 1
  80 print 3+5*6
  90 dim a
 100 dim b, c, d, e
 110 let q = 4+7*(1+1)
 130 if x+y*2 then
 140 elseif 1 then
 150 else 
 160 endif 
 170 while 1 do
 180 endwhile 
 190 gosub other
 200 return 
end
  10 dim a
  20 dim r
  25 let a = 5
  30 print a, r
  50 print 3+5*6
  60 print (3+5)*6
  70 print 3+5*6, 2, 1
  80 print 3+5*6
  90 dim a
 100 dim b, c, d, e
 110 let q = 4+7*(1+1)
 170 while 1 do
 180 endwhile 
 190 gosub other
 200 return 
end
  10 dim a
  20 dim r
  25 let a = 5
  30 print a, r
  50 print 3+5*6
  60 print (3+5)*6
  70 print 3+5*6, 2, 1
  80 print 3+5*6
  90 dim a
end
  50 print 3+5*6
  60 print (3+5)*6
  70 print 3+5*6, 2, 1
  80 print 3+5*6
  90 dim a
end
  50 print 3+5*6
  60 print (3+5)*6
  70 print 3+5*6, 2, 1
  80 print 3+5*6
  90 dim a
end
profile tests
      0ms other
      0ms   10 rem ### blinky ###
      0ms   20 dim i
      0ms   30 dim led as pin e2 for digital output inverted
      0ms   40 while 1 do
      0ms   50   for i = 1 to 16
      0ms   60     let led = !led
      0ms   70     sleep 50 ms
      0ms   80   next 
      0ms   90   sleep 800 ms
      0ms   95   break 
      0ms  100 endwhile 
      0ms  110 end 
end
      0ms other
      0ms   10 rem ### blinky ###
      0ms   20 dim i
      0ms   30 dim led as pin e2 for digital output inverted
      0ms   40 while 1 do
      4ms   50   for i = 1 to 16
      3ms   60     let led = !led
    804ms   70     sleep 50 ms
      0ms   80   next 
    801ms   90   sleep 800 ms
      0ms   95   break 
      0ms  100 endwhile 
      0ms  110 end 
end
      0ms other
      0ms   10 rem ### blinky ###
      0ms   20 dim i
            30 dim led as pin e2 for digital output inverted
      0ms   40 while 1 do
      0ms   50   for i = 1 to 16
            60     let led = !led
      0ms   70     sleep 50 ms
      0ms   80   next 
            90   sleep 800 ms
            95   break 
      0ms  100 endwhile 
           110 end 
      0ms 9999 rem 
end
      0ms other
      0ms   10 rem ### blinky ###
      0ms   20 dim i
            30 dim led as pin e2 for digital output inverted
      0ms   40 while 1 do
      7ms   50   for i = 1 to 16
            60     let led = !led
    804ms   70     sleep 50 ms
    801ms   80   next 
            90   sleep 800 ms
            95   break 
      0ms  100 endwhile 
           110 end 
      0ms 9999 rem 
end
larger tests
   1 print 1, 2+2
   2 dim a, x
   3 let a = 5
   4 print a
   5 let x = 15
   6 print a+x
   7 rem dim a
   8 rem dim a
end
1 4
5
20
  10 dim a
  20 let a = 0
  30 while a<10 do
  40   print a, a/2*2, a%2
  50   if a%2 then
  60     print 1, "odd", 2, "odd"
  70   endif 
  80   let a = a+1
  90 endwhile 
  91 gosub outer
  92 gosub outer
 100 end 
 110 print "not reached"
 190 sub outer
 200   gosub inner
 210   return 
 220 endsub 
 290 sub inner
 300   print "here"
 310   return 
 320 endsub 
 400 on timer 1 do gosub timer
 410 end 
 490 sub timer
 500   print "timer"
 510   return 
 520 endsub 
end
0 0 0
1 0 1
1 odd 2 odd
2 2 0
3 2 1
1 odd 2 odd
4 4 0
5 4 1
1 odd 2 odd
6 6 0
7 6 1
1 odd 2 odd
8 8 0
9 8 1
1 odd 2 odd
here
here
off
on
  10 dim a
  20 let a = 0
    let a = 0
  30 while a<10 do
  40   print a, a/2*2, a%2
0 0 0
  50   if a%2 then
  60     print 1, "odd", 2, "odd"
  70   endif 
  80   let a = a+1
    let a = 1
  90 endwhile 
  30 while a<10 do
  40   print a, a/2*2, a%2
1 0 1
  50   if a%2 then
  60     print 1, "odd", 2, "odd"
1 odd 2 odd
  70   endif 
  80   let a = a+1
    let a = 2
  90 endwhile 
  30 while a<10 do
  40   print a, a/2*2, a%2
2 2 0
  50   if a%2 then
  60     print 1, "odd", 2, "odd"
  70   endif 
  80   let a = a+1
    let a = 3
  90 endwhile 
  30 while a<10 do
  40   print a, a/2*2, a%2
3 2 1
  50   if a%2 then
  60     print 1, "odd", 2, "odd"
1 odd 2 odd
  70   endif 
  80   let a = a+1
    let a = 4
  90 endwhile 
  30 while a<10 do
  40   print a, a/2*2, a%2
4 4 0
  50   if a%2 then
  60     print 1, "odd", 2, "odd"
  70   endif 
  80   let a = a+1
    let a = 5
  90 endwhile 
  30 while a<10 do
  40   print a, a/2*2, a%2
5 4 1
  50   if a%2 then
  60     print 1, "odd", 2, "odd"
1 odd 2 odd
  70   endif 
  80   let a = a+1
    let a = 6
  90 endwhile 
  30 while a<10 do
  40   print a, a/2*2, a%2
6 6 0
  50   if a%2 then
  60     print 1, "odd", 2, "odd"
  70   endif 
  80   let a = a+1
    let a = 7
  90 endwhile 
  30 while a<10 do
  40   print a, a/2*2, a%2
7 6 1
  50   if a%2 then
  60     print 1, "odd", 2, "odd"
1 odd 2 odd
  70   endif 
  80   let a = a+1
    let a = 8
  90 endwhile 
  30 while a<10 do
  40   print a, a/2*2, a%2
8 8 0
  50   if a%2 then
  60     print 1, "odd", 2, "odd"
  70   endif 
  80   let a = a+1
    let a = 9
  90 endwhile 
  30 while a<10 do
  40   print a, a/2*2, a%2
9 8 1
  50   if a%2 then
  60     print 1, "odd", 2, "odd"
1 odd 2 odd
  70   endif 
  80   let a = a+1
    let a = 10
  90 endwhile 
  30 while a<10 do
  40   print a, a/2*2, a%2
  50   if a%2 then
  60     print 1, "odd", 2, "odd"
  70   endif 
  80   let a = a+1
  90 endwhile 
  91 gosub outer
 190 sub outer
 200   gosub inner
 290 sub inner
 300   print "here"
here
 310   return 
 210   return 
  92 gosub outer
 190 sub outer
 200   gosub inner
 290 sub inner
 300   print "here"
here
 310   return 
 210   return 
 100 end 
off
on
STOP at line 10!
STOP at line 20!
STOP at line 30!
0 0 0
STOP at line 40!
outer
 190 sub outer
 200   gosub inner
 210   return 
 220 endsub 
inner
 290 sub inner
 300   print "here"
 310   return 
 320 endsub 
delete inner
  10 dim a
  20 let a = 0
  30 while a<10 do
  40   print a, a/2*2, a%2
  50   if a%2 then
  60     print 1, "odd", 2, "odd"
  70   endif 
  80   let a = a+1
  90 endwhile 
  91 gosub outer
  92 gosub outer
 100 end 
 110 print "not reached"
 190 sub outer
 200   gosub inner
 210   return 
 220 endsub 
 400 on timer 1 do gosub timer
 410 end 
 490 sub timer
 500   print "timer"
 510   return 
 520 endsub 
end
delete outer
  10 dim a
  20 let a = 0
  30 while a<10 do
  40   print a, a/2*2, a%2
  50   if a%2 then
  60     print 1, "odd", 2, "odd"
  70   endif 
  80   let a = a+1
  90 endwhile 
  91 gosub outer
  92 gosub outer
 100 end 
 110 print "not reached"
 400 on timer 1 do gosub timer
 410 end 
 490 sub timer
 500   print "timer"
 510   return 
 520 endsub 
end
       ^ - error
         ^ - error
test some ifs and whiles
  10 if 0 then
  20   print 0
  30   if 1 then
  40     print 2
  50   else 
  60     print 3
  70   endif 
  80 elseif 1 then
  90   print 1
 100   if 1 then
 110     print 11
 120   else 
 130     print 4
 140   endif 
 150 else 
 160   print 0
 170   if 1 then
 180     print 5
 190   else 
 200     print 6
 210   endif 
 220 endif 
end
1
11
 100   if 1 then
  10 if 0 then
  20   print 0
  30   if 1 then
  40     print 2
  50   else 
  60     print 3
  70   endif 
  80 elseif 1 then
  90   print 1
 100   if 1 then
 100   if 1 then
 110     print 11
 120   else 
 130     print 4
 140   endif 
 150 else 
 160   print 0
 170   if 1 then
 180     print 5
 190   else 
 200     print 6
 210   endif 
 220 endif 
end
  90   print 1
 100   if 1 then
 110     print 11
  10 if 0 then
  20   print 0
  30   if 1 then
  40     print 2
  50   else 
  60     print 3
  70   endif 
  80 elseif 1 then
  90   print 1
 100   if 1 then
 110     print 11
 120   else 
 130     print 4
 140   endif 
 150 else 
 160   print 0
 170   if 1 then
 180     print 5
 190   else 
 200     print 6
 210   endif 
 220 endif 
end
test do/until
  10 dim a
  20 do 
  30   print a
  40   let a = a+1
  50 until a==10
  60 for a = 1 to 10
  70 next 
  80 print a
end
0
1
2
3
4
5
6
7
8
9
10
0
1
2
3
4
5
6
7
8
9
10
  10 dim a
  30 print a
  40 let a = a+1
missing block begins?
  50 until a==10
  60 for a = 1 to 10
  70 next 
  80 print a
end
  10 dim a
  20 do 
  30   print a
  40   let a = a+1
  60   for a = 1 to 10
  70   next 
  80   print a
missing block ends?
end
test help
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help strings
  help variables
  help pins
  help zigflea

see also:
  https://rtestardi.github.io/StickOS/
Welcome to StickOS for Microchip PIC32MK0512GPK v2.27!
Copyright (c) 2008-2023; all rights reserved.  Patent U.S. 8,117,587.
https://github.com/rtestardi/StickOS2
rtestardi@live.com
<Ctrl-C>                      -- stop program
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete ([<line>][-][<line>]|<subname>) -- delete program lines
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list ([<line>][-][<line>]|<subname>) -- list program lines
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile ([<line>][-][<line>]|<subname>) -- display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>|library]         -- save code ram to flash memory
subs                          -- list sub names
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
baud [<rate>]                     -- set/display uart console baud rate
autorun [on|off]                  -- autorun mode (on reset)
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line>                                 -- delete program line from code ram
<line> <statement>  // comment         -- enter program line into code ram

<variable>[$] = <expression> [, ...]   -- assign variable
? [dec|hex|raw] <expression> [, ...] [;] -- print results
assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[$][[n]] [as ...] [, ...] -- dimension variables
end                                    -- end program
halt                                   -- loop forever
input [dec|hex|raw] <variable>[$] [, ...] -- input data
label <label>                          -- read/data label
let <variable>[$] = <expression> [, ...] -- assign variable
print [dec|hex|raw] <expression> [, ...] [;] -- print results
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code
vprint <variable>[$] = [dec|hex|raw] <expression> [, ...] -- print to variable

for more information:
  help blocks
  help devices
  help expressions
  help strings
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt
  uart <n> (read|write) <variable> [, ...]   -- perform uart I/O

i2c:
  i2c (start <addr>|(read|write) <variable> [, ...]|stop) -- master i2c I/O

qspi:
  qspi <variable> [, ...]                    -- master qspi I/O

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  'c'                       -- character constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  <variable>#               -- length of array or string
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference; otherwise, by value
array variable indices start at 0
v is the same as v[0], except for input/print/i2c/qspi/uart statements

ram variables:
  dim <var>[$][[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables (read-only):
  analog  getchar  msecs  nodeid
  random  seconds  ticks  ticks_per_msec

for more information:
  help pins
pin names:
     ICSP        GND 3V3 5V  a0  a1  a2  a3  a4  a5  a6  a7  a8
  U                                                          e2
  S                                                   GND SCOPE
  B                                                              B
                                                                 N
                                                                 C
                                                      GND  WAVE
                                                             e3
     s1  e1      GND 3V3 5V  b0  b1  b2  b3  b4  b5  b6  b7  b8

[ab][0-8],e[1-3],s1 support general purpose digital input/output
(digital inputs b[0-8] are 5V tolerant)
a[1-8] = potential analog input pins (mV)
a[3-8] = potential analog output (PWM) pins (mV)
a[3-8] = potential servo output (PWM) pins (us)
a[3-8] = potential frequency output pins (Hz)
b6 (u1), b4 (u2) = potential uart input pins (received byte)
b8 (u1), b7 (u2) = potential uart output pins (transmit byte)
i2c: a6=SDA, a7=SCL
qspi: b0=SDO, b1=SDI, b2=SCK, b3=SS
connect <nodeid>              -- connect to MCU <nodeid> via zigflea
<Ctrl-D>                      -- disconnect from zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  sck1                 spiclk
  sdi1                 miso
  sdo1                 mosi
  int1                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test dims
  10 dim a as pin a3 for digital output
  20 dim b as pin a4 for digital input
  30 dim c as pin a1 for analog input
  31 dim x as pin a5 for digital output inverted
  32 dim y as pin a6 for digital input inverted
  33 dim z as pin a2 for analog input inverted
  34 dim h as pin b0 for digital output open_drain
  35 dim d1 as pin b1 for digital output inverted open_drain
  36 dim d2 as pin b2 for digital input debounced inverted
  37 dim d3 as pin b3 for digital input debounced
  38 dim d4 as pin a7 for analog input debounced
  40 dim d5 as pin a8 for analog input debounced inverted
  41 dim d6 as pin b4 for digital output inverted open_drain
  42 dim d as flash
  43 dim m as remote on nodeid 7
  44 dim n[4] as remote on nodeid 8
  50 dim e
  55 let e = 5
  60 dim f as flash
  70 dim g
  80 print a, b, c, d, e, f, g, m, n[3], d1, d2, d3, d4, d5, d6
  90 dim abs1 at address 0
  91 dim abs2 as byte at address 16
  92 dim abs3 as short at address 0x123
  93 dim abs4[4] as short at address 0x1048
  94 let abs1 = 1, abs2 = 2, abs3 = 3, abs4 = 4, abs4[1] = 5
  95 print abs1, hex abs2, abs3, abs4, abs4[1]
end
0 0 0 0 5 0 0 0 0 0 0 0 0 0 0
0 0x0 0x0 0x0 0x0 0x0 0x0 0x0
  10 dim y[0] as pin a0 for digital input
  11 dim y[1] as pin a0 for digital input
  12 dim y[2] as pin a0 for digital input
  13 dim x[10] as pin a0 for digital input
  14 dim y[2] as pin a0 for digital input
end
var 'y' already declared at this scope
STOP at line 14!
  10 dim x
  20 dim leds[1] as pin a3 for digital output
  30 dim leds[2] as pin a4 for digital output
  40 dim leds[3] as pin a5 for digital output
  50 for x = 0 to 8
  60   let leds[1] = x&1
  70   let leds[2] = x>>1&1
  80   let leds[3] = x>>2&1
  90 next 
end
  10 print "programmatic shift"
  20 dim x[1] as pin a3 for digital output
  21 dim x[2] as pin a4 for digital output
  22 dim x[3] as pin a5 for digital output
  23 dim x[4] as pin a6 for digital output
  24 dim y
  30 for y = 1 to 3
  40   if y==4 then
  50     let x[y] = 0
  60   else 
  70     let x[y] = x[y+1]
  80   endif 
  90 next 
end
programmatic shift
  10 print "programmatic shift with index error"
  20 dim x[0] as pin a3 for digital output
  21 dim x[1] as pin a4 for digital output
  22 dim x[2] as pin a5 for digital output
  23 dim x[3] as pin a6 for digital output
  24 dim y
  30 for y = 1 to 4
  40   let x[y-1] = x[y]
  50 next 
end
programmatic shift with index error
var 'x' undefined
STOP at line 40!
   5 print "gosub params"
  10 dim x
  20 dim arr[3]
  30 dim leds[0] as pin a3 for digital output
  40 dim leds[1] as pin a4 for digital output
  50 dim leds[3] as pin a5 for digital output
  60 let x = 2, leds[0] = 1, leds[1] = 1, arr[0] = 1, arr[1] = 2
  70 gosub dump
  80 gosub p x
  90 gosub dump
 100 gosub p leds
 110 gosub dump
 120 gosub p leds[1]
 130 gosub dump
 140 print "setting"
 150 gosub set x
 160 gosub dump
 170 gosub set leds
 180 gosub dump
 190 gosub set leds[1]
 200 gosub dump
 210 gosub set_1 arr
 220 gosub dump
 230 gosub set_1 leds
 240 end 
 250 sub p a
 260   print a
 270 endsub 
 280 sub set a
 290   print a
 300   let a = 0
 310 endsub 
 320 sub dump
 330   print x, leds[0], leds[1], arr[0], arr[1]
 340 endsub 
 350 sub set_1 a
 360   let a[1] = 0
 370 endsub 
end
gosub params
2 0 0 1 2
2
2 0 0 1 2
0
2 0 0 1 2
0
2 0 0 1 2
setting
2
0 0 0 1 2
0
0 0 0 1 2
0
0 0 0 1 2
0 0 0 1 0
var 'a' undefined
STOP at line 360!
test flash memory
  10 dim a as flash
  20 dim b[4] as flash
  25 print a
  30 for a = 0 to 3
  40   let b[a] = b[a]+a*a
  50 next 
  60 for a = 0 to 3
  70   print a, b[a]
  80 next 
end
on
  10 dim a as flash
  20 dim b[4] as flash
  25 print a
  30 for a = 0 to 3
  40 let b[a] = b[a]+a*a
  50 next 
  60 for a = 0 to 3
  70 print a, b[a]
  80 next 
end
  10 dim a as flash
  20 dim b[4] as flash
  25 print a
0
  30 for a = 0 to 3
    let a = 0
  40 let b[a] = b[a]+a*a
    let b[0] = 0
  50 next 
    let a = 1
  40 let b[a] = b[a]+a*a
    let b[1] = 1
  50 next 
    let a = 2
  40 let b[a] = b[a]+a*a
    let b[2] = 4
  50 next 
    let a = 3
  40 let b[a] = b[a]+a*a
    let b[3] = 9
  50 next 
  60 for a = 0 to 3
    let a = 0
  70 print a, b[a]
0 0
  80 next 
    let a = 1
  70 print a, b[a]
1 1
  80 next 
    let a = 2
  70 print a, b[a]
2 4
  80 next 
    let a = 3
  70 print a, b[a]
3 9
  80 next 
  10 dim a as flash
  20 dim b[4] as flash
  25 print a
3
  30 for a = 0 to 3
    let a = 0
  40 let b[a] = b[a]+a*a
    let b[0] = 0
  50 next 
    let a = 1
  40 let b[a] = b[a]+a*a
    let b[1] = 2
  50 next 
    let a = 2
  40 let b[a] = b[a]+a*a
    let b[2] = 8
  50 next 
    let a = 3
  40 let b[a] = b[a]+a*a
    let b[3] = 18
  50 next 
  60 for a = 0 to 3
    let a = 0
  70 print a, b[a]
0 0
  80 next 
    let a = 1
  70 print a, b[a]
1 2
  80 next 
    let a = 2
  70 print a, b[a]
2 8
  80 next 
    let a = 3
  70 print a, b[a]
3 18
  80 next 
off
  10 dim a as flash
  20 dim b[4] as flash
  25 print a
0
  30 for a = 0 to 3
    let a = 0
  40 let b[a] = b[a]+a*a
    let b[0] = 0
  50 next 
    let a = 1
  40 let b[a] = b[a]+a*a
    let b[1] = 1
  50 next 
    let a = 2
  40 let b[a] = b[a]+a*a
    let b[2] = 4
  50 next 
    let a = 3
  40 let b[a] = b[a]+a*a
    let b[3] = 9
  50 next 
  60 for a = 0 to 3
    let a = 0
  70 print a, b[a]
0 0
  80 next 
    let a = 1
  70 print a, b[a]
1 1
  80 next 
    let a = 2
  70 print a, b[a]
2 4
  80 next 
    let a = 3
  70 print a, b[a]
3 9
  80 next 
off
on
on
test array parsing
  10 dim a[3], b
  20 dim b, a[3+4]
  30 dim a[3+4*2]
  40 dim a[(3+4)*2]
  50 dim a[(3+4)*2]
  60 dim a[(3+4)*2] as byte
  70 dim a[(3+4)*2] as flash
  80 dim a[3+4-3]
 110 let a[3] = b[3]
 120 let a[3+4] = b[3+4]
 130 let a[3+4*2] = a[3+4*2]
 140 let a[(3+4)*2] = a[(3+4)*2]
 150 let a[(3+4)*2] = a[(3+4)*2]+2
 160 let a[(3+4)*2] = 2*a[(3+4)*2]+2
 170 let a[(3+4)*2] = 2*a[(3+4)*2]+2
 180 let a[(3+4)*2] = 2*a[(3+4)*2]+2
 190 let a[(3+4)*2] = 2*(a[(3+4)*2]+2)
end
0
2
4
6
test long variable names
  10 dim long
  20 dim evenlonger
  30 dim muchmuchmuchmuchlonger
  40 print long, evenlonger, muchmuchmuchmuchlonger
  50 let long = 1
  60 let evenlonger = 2
  70 let muchmuchmuchmuchlonger = 3
  80 print long, evenlonger, muchmuchmuchmuchlonger
  90 dim long2 as byte
 100 dim evenlonger2 as byte
 110 dim muchmuchmuchmuchlonger2 as byte
 120 print long2, evenlonger2, muchmuchmuchmuchlonger2
 130 print long, evenlonger, muchmuchmuchmuchlonger
end
0 0 0
1 2 3
var 'muchmuchmuchmuchlonger2' already declared at this scope
STOP at line 110!
0 0 3
1 2 3
test read/data
   1 dim a, b
  10 data 1, 0x2, 3
  20 data 0x4
  30 data 5, 0x6
  35 data -7
  40 while 1 do
  50   read a
  60   print a
  70 endwhile 
  75 data 0x10
end
dim a, b
data 1, 0x2, 3
data 0x4
data 5, 0x6
data -7
while 1 do
  read a
  print a
endwhile 
data 0x10
end
1
2
3
4
5
6
-7
16
out of data
STOP at line 50!
   1 dim a, b
  10 data 1, 0x2, 3
  20 data 0x4
  30 data 5, 0x6
  35 data -7
  40 while 1 do
  50   read a, b
  60   print a, b
  70 endwhile 
  75 data 0x10
  80 restore 
  90 read a, b
 100 print a, b
end
1 2
3 4
5 6
-7 16
out of data
STOP at line 50!
1 2
missing endwhile/next
   1 dim a, b, c
  10 data 1, 0x2, 3
  20 data 0x4
  29 label middle
  30 data 5, 0x6
  35 data 7
  40 while 1 do
  50   read a, b, c
  60   print a, b, c
  70 endwhile 
  75 data 0x10
  80 restore middle
  90 read a, b, c
 100 print a, b, c
end
1 2 3
4 5 6
out of data
STOP at line 50!
5 6 7
missing endwhile/next
test autorun
off
on
on
off
test pins
heartbeat e1
safemode* s1
qspi_cs* none
zigflea_rst* none
zigflea_attn* none
zigflea_rxtxen none
       ^ - error
e1
error -          ^
error -             ^
error -             ^
a5
none
heartbeat a5
safemode* none
qspi_cs* none
zigflea_rst* none
zigflea_attn* none
zigflea_rxtxen none
test servo
45
45
error -     ^
error -    ^
45
  10 dim x as pin a3 for servo output
end
test variable scopes
  10 dim a
  20 let a = 1
  25 print a
  30 gosub first
  40 print a
  50 gosub second
  60 print a
  70 end 
  90 sub first
 100   let a = 2
 110   print "local a", a
 120   return 
 130 endsub 
 190 sub second
 200   dim a
 210   let a = 3
 220   print "local a", a
 230   return 
 240 endsub 
end
  10 dim a
  20 let a = 1
  30 print a
  40 gosub first
  50 print a
  60 gosub second
  70 print a
  80 end 
  90 sub first
 100   let a = 2
 110   print "local a", a
 120   return 
 130 endsub 
 140 sub second
 150   dim a
 160   let a = 3
 170   print "local a", a
 180   return 
 190 endsub 
end
 100 dim a
 110 let a = 1
 120 print a
 130 gosub first
 140 print a
 150 gosub second
 160 print a
 170 end 
 180 sub first
 190   let a = 2
 200   print "local a", a
 210   return 
 220 endsub 
 230 sub second
 240   dim a
 250   let a = 3
 260   print "local a", a
 270   return 
 280 endsub 
end
1
local a 2
2
local a 3
2
test variable scope overflow
  10 dim a
  15 dim b[500] as byte
  20 gosub alloc
  30 end 
  90 sub alloc
  95   dim b[500] as byte
 100   let a = a+1
 110   if a<20 then
 120     gosub alloc
 125   endif 
 130 endsub 
end
  92   dim g as flash
declared flash or pin variable in sub
STOP at line 92!
  92   dim g as pin a3 for digital output
declared flash or pin variable in sub
STOP at line 92!
out of variable ram
STOP at line 95!
7
  10 dim a
  15 for a = 1 to 10
  20   gosub alloc
  25 next 
  30 end 
  90 sub alloc
  95   dim b[500] as byte
  96   print b[499]
 130 endsub 
end
0
0
0
0
0
0
0
0
0
0
test while breaks
  10 dim a
  20 while 1 do
  30   if a==10 then
  40     break 
  50   endif 
  60   let a = a+1
  70 endwhile 
  80 print a
  90 end 
end
10
  10 dim a
  19 while 1 do
  20   while 1 do
  30     if a==10 then
  40       break 2
  50     endif 
  60     let a = a+1
  70   endwhile 
  71   let a = a+1
  72 endwhile 
  80 print a
  90 end 
end
10
test while continues
  10 dim i
  20 while i<15 do
  30   let i = i+1
  40   sleep 100 ms
  50   if i%5==0 then
  60     continue 
  70   endif 
  80   print i
  90 endwhile 
end
1
2
3
4
6
7
8
9
11
12
13
14
  10 dim i
  11 dim j
  20 while i<15 do
  30   let i = i+1
  40   sleep 100 ms
  45   for j = 1 to 3
  46     print "   ", j
  50     if j==2&&i%5==0 then
  60       continue 2
  62       print "not"
  70     endif 
  75   next 
  80   print i
  90 endwhile 
end
    1
    2
    3
1
    1
    2
    3
2
    1
    2
    3
3
    1
    2
    3
4
    1
    2
    1
    2
    3
6
    1
    2
    3
7
    1
    2
    3
8
    1
    2
    3
9
    1
    2
    1
    2
    3
11
    1
    2
    3
12
    1
    2
    3
13
    1
    2
    3
14
    1
    2
test for loops
  10 dim x, y
  20 for y = 0 to 10 step 2
  30   for x = 1 to 2
  40     print y+x
  50   next 
  60 next 
end
1
2
3
4
5
6
7
8
9
10
11
12
  10 dim x, y
  20 for y = 0 to 10 step 2
  30   for x = 1 to 2
  40     print y+x
  41     if y==7 then
  42       break 
  43     endif 
  50   next 
  60 next 
end
1
2
3
4
5
6
7
8
9
10
11
12
  10 dim x, y
  20 for y = 0 to 10 step 2
  30   for x = 1 to 2
  40     print y+x
  41     if y==8 then
  42       break 
  43     endif 
  50   next 
  60 next 
end
1
2
3
4
5
6
7
8
9
11
12
  10 dim x, y
  20 for y = 0 to 10 step 2
  30   for x = 1 to 2
  40     print y+x
  41     if y==8 then
  42       break 2
  43     endif 
  50   next 
  60 next 
end
1
2
3
4
5
6
7
8
9
test arrays
   1 dim i, j
   2 dim a[256]
   3 while 1 do
  20   let i = (i*13+7)%256
  21   let j = j+1
  22   if a[i] then
  23     stop 
  24   endif 
  26   let a[i] = 1
  30 endwhile 
end
STOP at line 23!
257
   1 dim i, j
   2 dim a[256] as byte
   3 while 1 do
  20   let i = (i*13+7)%256
  21   let j = j+1
  22   if a[i] then
  23     stop 
  24   endif 
  26   let a[i] = 1
  30 endwhile 
end
STOP at line 23!
257
  5% ram code bytes used (unsaved changes!)
  0% flash code bytes used
  6% ram variable bytes used
  0% flash parameter bytes used
  1% variables used
  5% ram code bytes used (unsaved changes!)
  0% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
test large flash program
 68% ram code bytes used (unsaved changes!)
  0% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
1000 rem ### toaster ###
1010 dim target, secs
1020 dim thermocouple as pin a8 for analog input
1030 dim relay as pin a0 for digital output
1040 dim buzzer as pin a6 for frequency output
1050 data 512, 90, 746, 105, 894, 20, -1, -1
1060 configure timer 0 for 1 s
1070 configure timer 1 for 1 s
1080 on timer 0 do gosub adjust
1090 on timer 1 do gosub beep
1100 while target!=-1 do
1110   sleep secs s
1120   read target, secs
1130 endwhile 
1140 off timer 0
1150 off timer 1
1160 let relay = 0
1170 let buzzer = 100
1180 sleep 1 s
1190 let buzzer = 0
1200 end 
1210 sub adjust
1220   if thermocouple>=target then
1230     let relay = 0
1240   else 
1250     let relay = 1
1260   endif 
1270 endsub 
1280 sub beep
1290   let buzzer = thermocouple
1300   sleep 100 ms
1310   let buzzer = target
1320   sleep 100 ms
1330   let buzzer = 0
1340 endsub 
2000 rem ### toaster ###
2010 dim target, secs
2020 dim thermocouple as pin a8 for analog input
2030 dim relay as pin a0 for digital output
2040 dim buzzer as pin a6 for frequency output
2050 data 512, 90, 746, 105, 894, 20, -1, -1
2060 configure timer 0 for 1 s
2070 configure timer 1 for 1 s
2080 on timer 0 do gosub adjust
2090 on timer 1 do gosub beep
2100 while target!=-1 do
2110   sleep secs s
2120   read target, secs
2130 endwhile 
2140 off timer 0
2150 off timer 1
2160 let relay = 0
2170 let buzzer = 100
2180 sleep 1 s
2190 let buzzer = 0
2200 end 
2210 sub adjust
2220   if thermocouple>=target then
2230     let relay = 0
2240   else 
2250     let relay = 1
2260   endif 
2270 endsub 
2280 sub beep
2290   let buzzer = thermocouple
2300   sleep 100 ms
2310   let buzzer = target
2320   sleep 100 ms
2330   let buzzer = 0
2340 endsub 
3000 rem ### toaster ###
3010 dim target, secs
3020 dim thermocouple as pin a8 for analog input
3030 dim relay as pin a0 for digital output
3040 dim buzzer as pin a6 for frequency output
3050 data 512, 90, 746, 105, 894, 20, -1, -1
3060 configure timer 0 for 1 s
3070 configure timer 1 for 1 s
3080 on timer 0 do gosub adjust
3090 on timer 1 do gosub beep
3100 while target!=-1 do
3110   sleep secs s
3120   read target, secs
3130 endwhile 
3140 off timer 0
3150 off timer 1
3160 let relay = 0
3170 let buzzer = 100
3180 sleep 1 s
3190 let buzzer = 0
3200 end 
3210 sub adjust
3220   if thermocouple>=target then
3230     let relay = 0
3240   else 
3250     let relay = 1
3260   endif 
3270 endsub 
3280 sub beep
3290   let buzzer = thermocouple
3300   sleep 100 ms
3310   let buzzer = target
3320   sleep 100 ms
3330   let buzzer = 0
3340 endsub 
end
  0% ram code bytes used
 11% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
1000 rem ### toaster ###
1010 dim target, secs
1020 dim thermocouple as pin a8 for analog input
1030 dim relay as pin a0 for digital output
1040 dim buzzer as pin a6 for frequency output
1050 data 512, 90, 746, 105, 894, 20, -1, -1
1060 configure timer 0 for 1 s
1070 configure timer 1 for 1 s
1080 on timer 0 do gosub adjust
1090 on timer 1 do gosub beep
1100 while target!=-1 do
1110   sleep secs s
1120   read target, secs
1130 endwhile 
1140 off timer 0
1150 off timer 1
1160 let relay = 0
1170 let buzzer = 100
1180 sleep 1 s
1190 let buzzer = 0
1200 end 
1210 sub adjust
1220   if thermocouple>=target then
1230     let relay = 0
1240   else 
1250     let relay = 1
1260   endif 
1270 endsub 
1280 sub beep
1290   let buzzer = thermocouple
1300   sleep 100 ms
1310   let buzzer = target
1320   sleep 100 ms
1330   let buzzer = 0
1340 endsub 
2000 rem ### toaster ###
2010 dim target, secs
2020 dim thermocouple as pin a8 for analog input
2030 dim relay as pin a0 for digital output
2040 dim buzzer as pin a6 for frequency output
2050 data 512, 90, 746, 105, 894, 20, -1, -1
2060 configure timer 0 for 1 s
2070 configure timer 1 for 1 s
2080 on timer 0 do gosub adjust
2090 on timer 1 do gosub beep
2100 while target!=-1 do
2110   sleep secs s
2120   read target, secs
2130 endwhile 
2140 off timer 0
2150 off timer 1
2160 let relay = 0
2170 let buzzer = 100
2180 sleep 1 s
2190 let buzzer = 0
2200 end 
2210 sub adjust
2220   if thermocouple>=target then
2230     let relay = 0
2240   else 
2250     let relay = 1
2260   endif 
2270 endsub 
2280 sub beep
2290   let buzzer = thermocouple
2300   sleep 100 ms
2310   let buzzer = target
2320   sleep 100 ms
2330   let buzzer = 0
2340 endsub 
3000 rem ### toaster ###
3010 dim target, secs
3020 dim thermocouple as pin a8 for analog input
3030 dim relay as pin a0 for digital output
3040 dim buzzer as pin a6 for frequency output
3050 data 512, 90, 746, 105, 894, 20, -1, -1
3060 configure timer 0 for 1 s
3070 configure timer 1 for 1 s
3080 on timer 0 do gosub adjust
3090 on timer 1 do gosub beep
3100 while target!=-1 do
3110   sleep secs s
3120   read target, secs
3130 endwhile 
3140 off timer 0
3150 off timer 1
3160 let relay = 0
3170 let buzzer = 100
3180 sleep 1 s
3190 let buzzer = 0
3200 end 
3210 sub adjust
3220   if thermocouple>=target then
3230     let relay = 0
3240   else 
3250     let relay = 1
3260   endif 
3270 endsub 
3280 sub beep
3290   let buzzer = thermocouple
3300   sleep 100 ms
3310   let buzzer = target
3320   sleep 100 ms
3330   let buzzer = 0
3340 endsub 
end
 68% ram code bytes used (unsaved changes!)
 11% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
1000 rem ### toaster ###
1010 dim target, secs
1020 dim thermocouple as pin a8 for analog input
1030 dim relay as pin a0 for digital output
1040 dim buzzer as pin a6 for frequency output
1050 data 512, 90, 746, 105, 894, 20, -1, -1
1060 configure timer 0 for 1 s
1070 configure timer 1 for 1 s
1080 on timer 0 do gosub adjust
1090 on timer 1 do gosub beep
1100 while target!=-1 do
1110   sleep secs s
1120   read target, secs
1130 endwhile 
1140 off timer 0
1150 off timer 1
1160 let relay = 0
1170 let buzzer = 100
1180 sleep 1 s
1190 let buzzer = 0
1200 end 
1210 sub adjust
1220   if thermocouple>=target then
1230     let relay = 0
1240   else 
1250     let relay = 1
1260   endif 
1270 endsub 
1280 sub beep
1290   let buzzer = thermocouple
1300   sleep 100 ms
1310   let buzzer = target
1320   sleep 100 ms
1330   let buzzer = 0
1340 endsub 
2000 rem ### toaster ###
2010 dim target, secs
2020 dim thermocouple as pin a8 for analog input
2030 dim relay as pin a0 for digital output
2040 dim buzzer as pin a6 for frequency output
2050 data 512, 90, 746, 105, 894, 20, -1, -1
2060 configure timer 0 for 1 s
2070 configure timer 1 for 1 s
2080 on timer 0 do gosub adjust
2090 on timer 1 do gosub beep
2100 while target!=-1 do
2110   sleep secs s
2120   read target, secs
2130 endwhile 
2140 off timer 0
2150 off timer 1
2160 let relay = 0
2170 let buzzer = 100
2180 sleep 1 s
2190 let buzzer = 0
2200 end 
2210 sub adjust
2220   if thermocouple>=target then
2230     let relay = 0
2240   else 
2250     let relay = 1
2260   endif 
2270 endsub 
2280 sub beep
2290   let buzzer = thermocouple
2300   sleep 100 ms
2310   let buzzer = target
2320   sleep 100 ms
2330   let buzzer = 0
2340 endsub 
3000 rem ### toaster ###
3010 dim target, secs
3020 dim thermocouple as pin a8 for analog input
3030 dim relay as pin a0 for digital output
3040 dim buzzer as pin a6 for frequency output
3050 data 512, 90, 746, 105, 894, 20, -1, -1
3060 configure timer 0 for 1 s
3070 configure timer 1 for 1 s
3080 on timer 0 do gosub adjust
3090 on timer 1 do gosub beep
3100 while target!=-1 do
3110   sleep secs s
3120   read target, secs
3130 endwhile 
3140 off timer 0
3150 off timer 1
3160 let relay = 0
3170 let buzzer = 100
3180 sleep 1 s
3190 let buzzer = 0
3200 end 
3210 sub adjust
3220   if thermocouple>=target then
3230     let relay = 0
3240   else 
3250     let relay = 1
3260   endif 
3270 endsub 
3280 sub beep
3290   let buzzer = thermocouple
3300   sleep 100 ms
3310   let buzzer = target
3320   sleep 100 ms
3330   let buzzer = 0
3340 endsub 
4000 rem ### toaster ###
4010 dim target, secs
4020 dim thermocouple as pin a8 for analog input
4030 dim relay as pin a0 for digital output
4040 dim buzzer as pin a6 for frequency output
4050 data 512, 90, 746, 105, 894, 20, -1, -1
4060 configure timer 0 for 1 s
4070 configure timer 1 for 1 s
4080 on timer 0 do gosub adjust
4090 on timer 1 do gosub beep
4100 while target!=-1 do
4110   sleep secs s
4120   read target, secs
4130 endwhile 
4140 off timer 0
4150 off timer 1
4160 let relay = 0
4170 let buzzer = 100
4180 sleep 1 s
4190 let buzzer = 0
4200 end 
4210 sub adjust
4220   if thermocouple>=target then
4230     let relay = 0
4240   else 
4250     let relay = 1
4260   endif 
4270 endsub 
4280 sub beep
4290   let buzzer = thermocouple
4300   sleep 100 ms
4310   let buzzer = target
4320   sleep 100 ms
4330   let buzzer = 0
4340 endsub 
5000 rem ### toaster ###
5010 dim target, secs
5020 dim thermocouple as pin a8 for analog input
5030 dim relay as pin a0 for digital output
5040 dim buzzer as pin a6 for frequency output
5050 data 512, 90, 746, 105, 894, 20, -1, -1
5060 configure timer 0 for 1 s
5070 configure timer 1 for 1 s
5080 on timer 0 do gosub adjust
5090 on timer 1 do gosub beep
5100 while target!=-1 do
5110   sleep secs s
5120   read target, secs
5130 endwhile 
5140 off timer 0
5150 off timer 1
5160 let relay = 0
5170 let buzzer = 100
5180 sleep 1 s
5190 let buzzer = 0
5200 end 
5210 sub adjust
5220   if thermocouple>=target then
5230     let relay = 0
5240   else 
5250     let relay = 1
5260   endif 
5270 endsub 
5280 sub beep
5290   let buzzer = thermocouple
5300   sleep 100 ms
5310   let buzzer = target
5320   sleep 100 ms
5330   let buzzer = 0
5340 endsub 
6000 rem ### toaster ###
6010 dim target, secs
6020 dim thermocouple as pin a8 for analog input
6030 dim relay as pin a0 for digital output
6040 dim buzzer as pin a6 for frequency output
6050 data 512, 90, 746, 105, 894, 20, -1, -1
6060 configure timer 0 for 1 s
6070 configure timer 1 for 1 s
6080 on timer 0 do gosub adjust
6090 on timer 1 do gosub beep
6100 while target!=-1 do
6110   sleep secs s
6120   read target, secs
6130 endwhile 
6140 off timer 0
6150 off timer 1
6160 let relay = 0
6170 let buzzer = 100
6180 sleep 1 s
6190 let buzzer = 0
6200 end 
6210 sub adjust
6220   if thermocouple>=target then
6230     let relay = 0
6240   else 
6250     let relay = 1
6260   endif 
6270 endsub 
6280 sub beep
6290   let buzzer = thermocouple
6300   sleep 100 ms
6310   let buzzer = target
6320   sleep 100 ms
6330   let buzzer = 0
6340 endsub 
end
  0% ram code bytes used
 22% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
1000 rem ### toaster ###
1010 dim target, secs
1020 dim thermocouple as pin a8 for analog input
1030 dim relay as pin a0 for digital output
1040 dim buzzer as pin a6 for frequency output
1050 data 512, 90, 746, 105, 894, 20, -1, -1
1060 configure timer 0 for 1 s
1070 configure timer 1 for 1 s
1080 on timer 0 do gosub adjust
1090 on timer 1 do gosub beep
1100 while target!=-1 do
1110   sleep secs s
1120   read target, secs
1130 endwhile 
1140 off timer 0
1150 off timer 1
1160 let relay = 0
1170 let buzzer = 100
1180 sleep 1 s
1190 let buzzer = 0
1200 end 
1210 sub adjust
1220   if thermocouple>=target then
1230     let relay = 0
1240   else 
1250     let relay = 1
1260   endif 
1270 endsub 
1280 sub beep
1290   let buzzer = thermocouple
1300   sleep 100 ms
1310   let buzzer = target
1320   sleep 100 ms
1330   let buzzer = 0
1340 endsub 
2000 rem ### toaster ###
2010 dim target, secs
2020 dim thermocouple as pin a8 for analog input
2030 dim relay as pin a0 for digital output
2040 dim buzzer as pin a6 for frequency output
2050 data 512, 90, 746, 105, 894, 20, -1, -1
2060 configure timer 0 for 1 s
2070 configure timer 1 for 1 s
2080 on timer 0 do gosub adjust
2090 on timer 1 do gosub beep
2100 while target!=-1 do
2110   sleep secs s
2120   read target, secs
2130 endwhile 
2140 off timer 0
2150 off timer 1
2160 let relay = 0
2170 let buzzer = 100
2180 sleep 1 s
2190 let buzzer = 0
2200 end 
2210 sub adjust
2220   if thermocouple>=target then
2230     let relay = 0
2240   else 
2250     let relay = 1
2260   endif 
2270 endsub 
2280 sub beep
2290   let buzzer = thermocouple
2300   sleep 100 ms
2310   let buzzer = target
2320   sleep 100 ms
2330   let buzzer = 0
2340 endsub 
3000 rem ### toaster ###
3010 dim target, secs
3020 dim thermocouple as pin a8 for analog input
3030 dim relay as pin a0 for digital output
3040 dim buzzer as pin a6 for frequency output
3050 data 512, 90, 746, 105, 894, 20, -1, -1
3060 configure timer 0 for 1 s
3070 configure timer 1 for 1 s
3080 on timer 0 do gosub adjust
3090 on timer 1 do gosub beep
3100 while target!=-1 do
3110   sleep secs s
3120   read target, secs
3130 endwhile 
3140 off timer 0
3150 off timer 1
3160 let relay = 0
3170 let buzzer = 100
3180 sleep 1 s
3190 let buzzer = 0
3200 end 
3210 sub adjust
3220   if thermocouple>=target then
3230     let relay = 0
3240   else 
3250     let relay = 1
3260   endif 
3270 endsub 
3280 sub beep
3290   let buzzer = thermocouple
3300   sleep 100 ms
3310   let buzzer = target
3320   sleep 100 ms
3330   let buzzer = 0
3340 endsub 
4000 rem ### toaster ###
4010 dim target, secs
4020 dim thermocouple as pin a8 for analog input
4030 dim relay as pin a0 for digital output
4040 dim buzzer as pin a6 for frequency output
4050 data 512, 90, 746, 105, 894, 20, -1, -1
4060 configure timer 0 for 1 s
4070 configure timer 1 for 1 s
4080 on timer 0 do gosub adjust
4090 on timer 1 do gosub beep
4100 while target!=-1 do
4110   sleep secs s
4120   read target, secs
4130 endwhile 
4140 off timer 0
4150 off timer 1
4160 let relay = 0
4170 let buzzer = 100
4180 sleep 1 s
4190 let buzzer = 0
4200 end 
4210 sub adjust
4220   if thermocouple>=target then
4230     let relay = 0
4240   else 
4250     let relay = 1
4260   endif 
4270 endsub 
4280 sub beep
4290   let buzzer = thermocouple
4300   sleep 100 ms
4310   let buzzer = target
4320   sleep 100 ms
4330   let buzzer = 0
4340 endsub 
5000 rem ### toaster ###
5010 dim target, secs
5020 dim thermocouple as pin a8 for analog input
5030 dim relay as pin a0 for digital output
5040 dim buzzer as pin a6 for frequency output
5050 data 512, 90, 746, 105, 894, 20, -1, -1
5060 configure timer 0 for 1 s
5070 configure timer 1 for 1 s
5080 on timer 0 do gosub adjust
5090 on timer 1 do gosub beep
5100 while target!=-1 do
5110   sleep secs s
5120   read target, secs
5130 endwhile 
5140 off timer 0
5150 off timer 1
5160 let relay = 0
5170 let buzzer = 100
5180 sleep 1 s
5190 let buzzer = 0
5200 end 
5210 sub adjust
5220   if thermocouple>=target then
5230     let relay = 0
5240   else 
5250     let relay = 1
5260   endif 
5270 endsub 
5280 sub beep
5290   let buzzer = thermocouple
5300   sleep 100 ms
5310   let buzzer = target
5320   sleep 100 ms
5330   let buzzer = 0
5340 endsub 
6000 rem ### toaster ###
6010 dim target, secs
6020 dim thermocouple as pin a8 for analog input
6030 dim relay as pin a0 for digital output
6040 dim buzzer as pin a6 for frequency output
6050 data 512, 90, 746, 105, 894, 20, -1, -1
6060 configure timer 0 for 1 s
6070 configure timer 1 for 1 s
6080 on timer 0 do gosub adjust
6090 on timer 1 do gosub beep
6100 while target!=-1 do
6110   sleep secs s
6120   read target, secs
6130 endwhile 
6140 off timer 0
6150 off timer 1
6160 let relay = 0
6170 let buzzer = 100
6180 sleep 1 s
6190 let buzzer = 0
6200 end 
6210 sub adjust
6220   if thermocouple>=target then
6230     let relay = 0
6240   else 
6250     let relay = 1
6260   endif 
6270 endsub 
6280 sub beep
6290   let buzzer = thermocouple
6300   sleep 100 ms
6310   let buzzer = target
6320   sleep 100 ms
6330   let buzzer = 0
6340 endsub 
end
 68% ram code bytes used (unsaved changes!)
 22% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
  10 rem ### toaster ###
  20 dim target, secs
  30 dim thermocouple as pin a8 for analog input
  40 dim relay as pin a0 for digital output
  50 dim buzzer as pin a6 for frequency output
  60 data 512, 90, 746, 105, 894, 20, -1, -1
  70 configure timer 0 for 1 s
  80 configure timer 1 for 1 s
  90 on timer 0 do gosub adjust
 100 on timer 1 do gosub beep
 110 while target!=-1 do
 120   sleep secs s
 130   read target, secs
 140 endwhile 
 150 off timer 0
 160 off timer 1
 170 let relay = 0
 180 let buzzer = 100
 190 sleep 1 s
 200 let buzzer = 0
 210 end 
 220 sub adjust
 230   if thermocouple>=target then
 240     let relay = 0
 250   else 
 260     let relay = 1
 270   endif 
 280 endsub 
 290 sub beep
 300   let buzzer = thermocouple
 310   sleep 100 ms
 320   let buzzer = target
 330   sleep 100 ms
 340   let buzzer = 0
 350 endsub 
 360 rem ### toaster ###
 370 dim target, secs
 380 dim thermocouple as pin a8 for analog input
 390 dim relay as pin a0 for digital output
 400 dim buzzer as pin a6 for frequency output
 410 data 512, 90, 746, 105, 894, 20, -1, -1
 420 configure timer 0 for 1 s
 430 configure timer 1 for 1 s
 440 on timer 0 do gosub adjust
 450 on timer 1 do gosub beep
 460 while target!=-1 do
 470   sleep secs s
 480   read target, secs
 490 endwhile 
 500 off timer 0
 510 off timer 1
 520 let relay = 0
 530 let buzzer = 100
 540 sleep 1 s
 550 let buzzer = 0
 560 end 
 570 sub adjust
 580   if thermocouple>=target then
 590     let relay = 0
 600   else 
 610     let relay = 1
 620   endif 
 630 endsub 
 640 sub beep
 650   let buzzer = thermocouple
 660   sleep 100 ms
 670   let buzzer = target
 680   sleep 100 ms
 690   let buzzer = 0
 700 endsub 
 710 rem ### toaster ###
 720 dim target, secs
 730 dim thermocouple as pin a8 for analog input
 740 dim relay as pin a0 for digital output
 750 dim buzzer as pin a6 for frequency output
 760 data 512, 90, 746, 105, 894, 20, -1, -1
 770 configure timer 0 for 1 s
 780 configure timer 1 for 1 s
 790 on timer 0 do gosub adjust
 800 on timer 1 do gosub beep
 810 while target!=-1 do
 820   sleep secs s
 830   read target, secs
 840 endwhile 
 850 off timer 0
 860 off timer 1
 870 let relay = 0
 880 let buzzer = 100
 890 sleep 1 s
 900 let buzzer = 0
 910 end 
 920 sub adjust
 930   if thermocouple>=target then
 940     let relay = 0
 950   else 
 960     let relay = 1
 970   endif 
 980 endsub 
 990 sub beep
1000   let buzzer = thermocouple
1010   sleep 100 ms
1020   let buzzer = target
1030   sleep 100 ms
1040   let buzzer = 0
1050 endsub 
1060 rem ### toaster ###
1070 dim target, secs
1080 dim thermocouple as pin a8 for analog input
1090 dim relay as pin a0 for digital output
1100 dim buzzer as pin a6 for frequency output
1110 data 512, 90, 746, 105, 894, 20, -1, -1
1120 configure timer 0 for 1 s
1130 configure timer 1 for 1 s
1140 on timer 0 do gosub adjust
1150 on timer 1 do gosub beep
1160 while target!=-1 do
1170   sleep secs s
1180   read target, secs
1190 endwhile 
1200 off timer 0
1210 off timer 1
1220 let relay = 0
1230 let buzzer = 100
1240 sleep 1 s
1250 let buzzer = 0
1260 end 
1270 sub adjust
1280   if thermocouple>=target then
1290     let relay = 0
1300   else 
1310     let relay = 1
1320   endif 
1330 endsub 
1340 sub beep
1350   let buzzer = thermocouple
1360   sleep 100 ms
1370   let buzzer = target
1380   sleep 100 ms
1390   let buzzer = 0
1400 endsub 
1410 rem ### toaster ###
1420 dim target, secs
1430 dim thermocouple as pin a8 for analog input
1440 dim relay as pin a0 for digital output
1450 dim buzzer as pin a6 for frequency output
1460 data 512, 90, 746, 105, 894, 20, -1, -1
1470 configure timer 0 for 1 s
1480 configure timer 1 for 1 s
1490 on timer 0 do gosub adjust
1500 on timer 1 do gosub beep
1510 while target!=-1 do
1520   sleep secs s
1530   read target, secs
1540 endwhile 
1550 off timer 0
1560 off timer 1
1570 let relay = 0
1580 let buzzer = 100
1590 sleep 1 s
1600 let buzzer = 0
1610 end 
1620 sub adjust
1630   if thermocouple>=target then
1640     let relay = 0
1650   else 
1660     let relay = 1
1670   endif 
1680 endsub 
1690 sub beep
1700   let buzzer = thermocouple
1710   sleep 100 ms
1720   let buzzer = target
1730   sleep 100 ms
1740   let buzzer = 0
1750 endsub 
1760 rem ### toaster ###
1770 dim target, secs
1780 dim thermocouple as pin a8 for analog input
1790 dim relay as pin a0 for digital output
1800 dim buzzer as pin a6 for frequency output
1810 data 512, 90, 746, 105, 894, 20, -1, -1
1820 configure timer 0 for 1 s
1830 configure timer 1 for 1 s
1840 on timer 0 do gosub adjust
1850 on timer 1 do gosub beep
1860 while target!=-1 do
1870   sleep secs s
1880   read target, secs
1890 endwhile 
1900 off timer 0
1910 off timer 1
1920 let relay = 0
1930 let buzzer = 100
1940 sleep 1 s
1950 let buzzer = 0
1960 end 
1970 sub adjust
1980   if thermocouple>=target then
1990     let relay = 0
2000   else 
2010     let relay = 1
2020   endif 
2030 endsub 
2040 sub beep
2050   let buzzer = thermocouple
2060   sleep 100 ms
2070   let buzzer = target
2080   sleep 100 ms
2090   let buzzer = 0
2100 endsub 
2110 rem ### toaster ###
2120 dim target, secs
2130 dim thermocouple as pin a8 for analog input
2140 dim relay as pin a0 for digital output
2150 dim buzzer as pin a6 for frequency output
2160 data 512, 90, 746, 105, 894, 20, -1, -1
2170 configure timer 0 for 1 s
2180 configure timer 1 for 1 s
2190 on timer 0 do gosub adjust
2200 on timer 1 do gosub beep
2210 while target!=-1 do
2220   sleep secs s
2230   read target, secs
2240 endwhile 
2250 off timer 0
2260 off timer 1
2270 let relay = 0
2280 let buzzer = 100
2290 sleep 1 s
2300 let buzzer = 0
2310 end 
2320 sub adjust
2330   if thermocouple>=target then
2340     let relay = 0
2350   else 
2360     let relay = 1
2370   endif 
2380 endsub 
2390 sub beep
2400   let buzzer = thermocouple
2410   sleep 100 ms
2420   let buzzer = target
2430   sleep 100 ms
2440   let buzzer = 0
2450 endsub 
2460 rem ### toaster ###
2470 dim target, secs
2480 dim thermocouple as pin a8 for analog input
2490 dim relay as pin a0 for digital output
2500 dim buzzer as pin a6 for frequency output
2510 data 512, 90, 746, 105, 894, 20, -1, -1
2520 configure timer 0 for 1 s
2530 configure timer 1 for 1 s
2540 on timer 0 do gosub adjust
2550 on timer 1 do gosub beep
2560 while target!=-1 do
2570   sleep secs s
2580   read target, secs
2590 endwhile 
2600 off timer 0
2610 off timer 1
2620 let relay = 0
2630 let buzzer = 100
2640 sleep 1 s
2650 let buzzer = 0
2660 end 
2670 sub adjust
2680   if thermocouple>=target then
2690     let relay = 0
2700   else 
2710     let relay = 1
2720   endif 
2730 endsub 
2740 sub beep
2750   let buzzer = thermocouple
2760   sleep 100 ms
2770   let buzzer = target
2780   sleep 100 ms
2790   let buzzer = 0
2800 endsub 
2810 rem ### toaster ###
2820 dim target, secs
2830 dim thermocouple as pin a8 for analog input
2840 dim relay as pin a0 for digital output
2850 dim buzzer as pin a6 for frequency output
2860 data 512, 90, 746, 105, 894, 20, -1, -1
2870 configure timer 0 for 1 s
2880 configure timer 1 for 1 s
2890 on timer 0 do gosub adjust
2900 on timer 1 do gosub beep
2910 while target!=-1 do
2920   sleep secs s
2930   read target, secs
2940 endwhile 
2950 off timer 0
2960 off timer 1
2970 let relay = 0
2980 let buzzer = 100
2990 sleep 1 s
3000 let buzzer = 0
3010 end 
3020 sub adjust
3030   if thermocouple>=target then
3040     let relay = 0
3050   else 
3060     let relay = 1
3070   endif 
3080 endsub 
3090 sub beep
3100   let buzzer = thermocouple
3110   sleep 100 ms
3120   let buzzer = target
3130   sleep 100 ms
3140   let buzzer = 0
3150 endsub 
end
  0% ram code bytes used
 34% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
  10 rem ### toaster ###
  20 dim target, secs
  30 dim thermocouple as pin a8 for analog input
  40 dim relay as pin a0 for digital output
  50 dim buzzer as pin a6 for frequency output
  60 data 512, 90, 746, 105, 894, 20, -1, -1
  70 configure timer 0 for 1 s
  80 configure timer 1 for 1 s
  90 on timer 0 do gosub adjust
 100 on timer 1 do gosub beep
 110 while target!=-1 do
 120   sleep secs s
 130   read target, secs
 140 endwhile 
 150 off timer 0
 160 off timer 1
 170 let relay = 0
 180 let buzzer = 100
 190 sleep 1 s
 200 let buzzer = 0
 210 end 
 220 sub adjust
 230   if thermocouple>=target then
 240     let relay = 0
 250   else 
 260     let relay = 1
 270   endif 
 280 endsub 
 290 sub beep
 300   let buzzer = thermocouple
 310   sleep 100 ms
 320   let buzzer = target
 330   sleep 100 ms
 340   let buzzer = 0
 350 endsub 
 360 rem ### toaster ###
 370 dim target, secs
 380 dim thermocouple as pin a8 for analog input
 390 dim relay as pin a0 for digital output
 400 dim buzzer as pin a6 for frequency output
 410 data 512, 90, 746, 105, 894, 20, -1, -1
 420 configure timer 0 for 1 s
 430 configure timer 1 for 1 s
 440 on timer 0 do gosub adjust
 450 on timer 1 do gosub beep
 460 while target!=-1 do
 470   sleep secs s
 480   read target, secs
 490 endwhile 
 500 off timer 0
 510 off timer 1
 520 let relay = 0
 530 let buzzer = 100
 540 sleep 1 s
 550 let buzzer = 0
 560 end 
 570 sub adjust
 580   if thermocouple>=target then
 590     let relay = 0
 600   else 
 610     let relay = 1
 620   endif 
 630 endsub 
 640 sub beep
 650   let buzzer = thermocouple
 660   sleep 100 ms
 670   let buzzer = target
 680   sleep 100 ms
 690   let buzzer = 0
 700 endsub 
 710 rem ### toaster ###
 720 dim target, secs
 730 dim thermocouple as pin a8 for analog input
 740 dim relay as pin a0 for digital output
 750 dim buzzer as pin a6 for frequency output
 760 data 512, 90, 746, 105, 894, 20, -1, -1
 770 configure timer 0 for 1 s
 780 configure timer 1 for 1 s
 790 on timer 0 do gosub adjust
 800 on timer 1 do gosub beep
 810 while target!=-1 do
 820   sleep secs s
 830   read target, secs
 840 endwhile 
 850 off timer 0
 860 off timer 1
 870 let relay = 0
 880 let buzzer = 100
 890 sleep 1 s
 900 let buzzer = 0
 910 end 
 920 sub adjust
 930   if thermocouple>=target then
 940     let relay = 0
 950   else 
 960     let relay = 1
 970   endif 
 980 endsub 
 990 sub beep
1000   let buzzer = thermocouple
1010   sleep 100 ms
1020   let buzzer = target
1030   sleep 100 ms
1040   let buzzer = 0
1050 endsub 
1060 rem ### toaster ###
1070 dim target, secs
1080 dim thermocouple as pin a8 for analog input
1090 dim relay as pin a0 for digital output
1100 dim buzzer as pin a6 for frequency output
1110 data 512, 90, 746, 105, 894, 20, -1, -1
1120 configure timer 0 for 1 s
1130 configure timer 1 for 1 s
1140 on timer 0 do gosub adjust
1150 on timer 1 do gosub beep
1160 while target!=-1 do
1170   sleep secs s
1180   read target, secs
1190 endwhile 
1200 off timer 0
1210 off timer 1
1220 let relay = 0
1230 let buzzer = 100
1240 sleep 1 s
1250 let buzzer = 0
1260 end 
1270 sub adjust
1280   if thermocouple>=target then
1290     let relay = 0
1300   else 
1310     let relay = 1
1320   endif 
1330 endsub 
1340 sub beep
1350   let buzzer = thermocouple
1360   sleep 100 ms
1370   let buzzer = target
1380   sleep 100 ms
1390   let buzzer = 0
1400 endsub 
1410 rem ### toaster ###
1420 dim target, secs
1430 dim thermocouple as pin a8 for analog input
1440 dim relay as pin a0 for digital output
1450 dim buzzer as pin a6 for frequency output
1460 data 512, 90, 746, 105, 894, 20, -1, -1
1470 configure timer 0 for 1 s
1480 configure timer 1 for 1 s
1490 on timer 0 do gosub adjust
1500 on timer 1 do gosub beep
1510 while target!=-1 do
1520   sleep secs s
1530   read target, secs
1540 endwhile 
1550 off timer 0
1560 off timer 1
1570 let relay = 0
1580 let buzzer = 100
1590 sleep 1 s
1600 let buzzer = 0
1610 end 
1620 sub adjust
1630   if thermocouple>=target then
1640     let relay = 0
1650   else 
1660     let relay = 1
1670   endif 
1680 endsub 
1690 sub beep
1700   let buzzer = thermocouple
1710   sleep 100 ms
1720   let buzzer = target
1730   sleep 100 ms
1740   let buzzer = 0
1750 endsub 
1760 rem ### toaster ###
1770 dim target, secs
1780 dim thermocouple as pin a8 for analog input
1790 dim relay as pin a0 for digital output
1800 dim buzzer as pin a6 for frequency output
1810 data 512, 90, 746, 105, 894, 20, -1, -1
1820 configure timer 0 for 1 s
1830 configure timer 1 for 1 s
1840 on timer 0 do gosub adjust
1850 on timer 1 do gosub beep
1860 while target!=-1 do
1870   sleep secs s
1880   read target, secs
1890 endwhile 
1900 off timer 0
1910 off timer 1
1920 let relay = 0
1930 let buzzer = 100
1940 sleep 1 s
1950 let buzzer = 0
1960 end 
1970 sub adjust
1980   if thermocouple>=target then
1990     let relay = 0
2000   else 
2010     let relay = 1
2020   endif 
2030 endsub 
2040 sub beep
2050   let buzzer = thermocouple
2060   sleep 100 ms
2070   let buzzer = target
2080   sleep 100 ms
2090   let buzzer = 0
2100 endsub 
2110 rem ### toaster ###
2120 dim target, secs
2130 dim thermocouple as pin a8 for analog input
2140 dim relay as pin a0 for digital output
2150 dim buzzer as pin a6 for frequency output
2160 data 512, 90, 746, 105, 894, 20, -1, -1
2170 configure timer 0 for 1 s
2180 configure timer 1 for 1 s
2190 on timer 0 do gosub adjust
2200 on timer 1 do gosub beep
2210 while target!=-1 do
2220   sleep secs s
2230   read target, secs
2240 endwhile 
2250 off timer 0
2260 off timer 1
2270 let relay = 0
2280 let buzzer = 100
2290 sleep 1 s
2300 let buzzer = 0
2310 end 
2320 sub adjust
2330   if thermocouple>=target then
2340     let relay = 0
2350   else 
2360     let relay = 1
2370   endif 
2380 endsub 
2390 sub beep
2400   let buzzer = thermocouple
2410   sleep 100 ms
2420   let buzzer = target
2430   sleep 100 ms
2440   let buzzer = 0
2450 endsub 
2460 rem ### toaster ###
2470 dim target, secs
2480 dim thermocouple as pin a8 for analog input
2490 dim relay as pin a0 for digital output
2500 dim buzzer as pin a6 for frequency output
2510 data 512, 90, 746, 105, 894, 20, -1, -1
2520 configure timer 0 for 1 s
2530 configure timer 1 for 1 s
2540 on timer 0 do gosub adjust
2550 on timer 1 do gosub beep
2560 while target!=-1 do
2570   sleep secs s
2580   read target, secs
2590 endwhile 
2600 off timer 0
2610 off timer 1
2620 let relay = 0
2630 let buzzer = 100
2640 sleep 1 s
2650 let buzzer = 0
2660 end 
2670 sub adjust
2680   if thermocouple>=target then
2690     let relay = 0
2700   else 
2710     let relay = 1
2720   endif 
2730 endsub 
2740 sub beep
2750   let buzzer = thermocouple
2760   sleep 100 ms
2770   let buzzer = target
2780   sleep 100 ms
2790   let buzzer = 0
2800 endsub 
2810 rem ### toaster ###
2820 dim target, secs
2830 dim thermocouple as pin a8 for analog input
2840 dim relay as pin a0 for digital output
2850 dim buzzer as pin a6 for frequency output
2860 data 512, 90, 746, 105, 894, 20, -1, -1
2870 configure timer 0 for 1 s
2880 configure timer 1 for 1 s
2890 on timer 0 do gosub adjust
2900 on timer 1 do gosub beep
2910 while target!=-1 do
2920   sleep secs s
2930   read target, secs
2940 endwhile 
2950 off timer 0
2960 off timer 1
2970 let relay = 0
2980 let buzzer = 100
2990 sleep 1 s
3000 let buzzer = 0
3010 end 
3020 sub adjust
3030   if thermocouple>=target then
3040     let relay = 0
3050   else 
3060     let relay = 1
3070   endif 
3080 endsub 
3090 sub beep
3100   let buzzer = thermocouple
3110   sleep 100 ms
3120   let buzzer = target
3130   sleep 100 ms
3140   let buzzer = 0
3150 endsub 
end
  0% ram code bytes used
  0% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
test configures
  10 configure uart 1 for 9600 baud 8 data even parity
  20 configure uart 2 for 115200 baud 7 data no parity
  30 configure uart 2 for 1200 baud 6 data odd parity loopback
  40 configure timer 0 for 1000 s
  50 configure timer 1 for 10 ms
  55 configure timer 2 for 17 us
  70 qspi a, b, c, d
end
  10 rem ### uart pio ###
  20 configure uart 1 for 9600 baud 7 data even parity loopback
  30 dim tx as pin b8 for uart output
  40 dim rx as pin b6 for uart input
  50 let tx = 3
  60 let tx = 4
  70 while tx do
  80 endwhile 
  90 print rx
 100 print rx
 110 print rx
 120 end 
end
test qspi error case
test uart
  10 rem ### uart isr ###
  20 dim data
  30 data 1, 1, 2, 3, 5, 8, 13, 21, 0
  40 configure uart 2 for 300 baud 8 data no parity loopback
  50 dim tx as pin b7 for uart output
  60 dim rx as pin b4 for uart input
  70 on uart 2 input do gosub receive
  80 on uart 2 output do gosub transmit
  90 sleep 1000 ms
 100 end 
 110 sub receive
 120   print "received", rx
 130 endsub 
 140 sub transmit
 150   read data
 160   if !data then
 170     return 
 180   endif 
 190   assert !tx
 200   print "sending", data
 210   let tx = data
 220 endsub 
end
return from sub scope
  10 gosub output
  20 end 
 140 sub output
 150   if 1!=8 then
 151     return 
 152   endif 
 210 endsub 
end
if, elseif, else
  10 dim a
  20 for a = -5 to 5
  30   if !a then
  40     print a, "is zero"
  50   elseif a%2 then
  60     print a, "is odd"
  70   else 
  80     print a, "is even"
  90   endif 
 100 next 
end
-5 is odd
-4 is even
-3 is odd
-2 is even
-1 is odd
0 is zero
1 is odd
2 is even
3 is odd
4 is even
5 is odd
filesystem
prog4
prog3
prog2
prog1
  10 rem this is a program
  20 rem 44
end
  10 rem this is a program
  20 rem 1
end
  10 rem this is a program
  20 rem 22
end
  10 rem this is a program
  20 rem 3
end
  10 rem this is a program
  20 rem 44
end
program 'prog0' not found
prog4
prog3
prog2
prog1
  10 rem this is a program
  20 rem 44
end
prog4
prog3
prog2
  10 rem this is a program
  20 rem 44
end
prog4
prog3
  10 rem this is a program
  20 rem 44
end
prog4
  10 rem this is a program
  20 rem 444
end
program 'prog5' not found
prog4
  10 rem this is a program
  20 rem 444
end
  10 rem this is a program
  20 rem 444
end
prog4
this is a very
  10 rem this is a program
  20 rem 444
end
prog4
this is a very
  10 rem this is a program
  20 rem long
end
prog4
  10 rem this is a program
  20 rem long
end
out of storage
out of storage
on/off/mask/unmask
  10 on xxx do gosub yyy
  20 on zzz+aaa do stop 
  30 off xxx
  40 off zzz+aaa
  50 unmask xxx
  60 unmask zzz+aaa
  70 on timer 1 do gosub tick
  80 on uart 1 input do gosub rx
  90 off timer 1
 100 off uart 1 input
end
watchpoints
on
off
on
  10 dim x
  20 on x do print 1
  30 on x+0 do print 2
  40 on x do print 3
end
watchpoint already defined
STOP at line 40!
  10 dim x
  20 on x+1 do print 1, x
  30 on x+2 do print 2, x
  40 on x+3 do print 3, x
  50 on x+4 do print 4, x
  60 on x+5 do print 5, x
end
1 0
2 0
3 0
4 0
too many watchpoints
STOP at line 60!
  10 dim x
  20 on x+1 do print 1, x
  30 on x+2 do print 2, x
  40 on x+3 do print 3, x
  50 on x+4 do print 4, x
  70 let x = 1
  80 print "80"
  90 let x = -1
 100 let x = 2
 110 print "110"
 120 let x = -2
 130 let x = 1
 140 print "140"
 150 let x = -3
 160 let x = 1
 170 print "170"
 180 let x = -4
 190 let x = 1
 200 print "200"
 210 let x = -5
 220 let x = 1
end
1 0
2 0
3 0
4 0
80
1 2
110
2 1
140
3 1
170
4 1
200
  10 dim x
  20 on x+1 do print 1, x
  30 on x+2 do print 2, x
  40 on x+3 do print 3, x
  50 on x+4 do print 4, x
  70 let x = 1
  80 print "80"
  90 let x = -1
 100 let x = 2
 110 print "110"
 120 let x = -2
 130 let x = 1
 140 print "140"
 150 let x = -3
 160 let x = 1
 170 print "170"
 180 let x = -4
 190 let x = 1
 200 print "200"
 210 let x = -5
 220 let x = 1
end
1 0
2 0
3 0
4 0
80
1 2
110
2 1
140
3 1
170
4 1
200
  10 dim i
  20 on i%5 do stop 
  30 while 1 do
  40   let i = i+1
  50   let i = i+1
  51   if i==100 then
  52     break 
  53   endif 
  60 endwhile 
end
STOP at line 50!
2
STOP at line 51!
6
100
  10 dim x
  20 on x==1 do print "ONE", x
  21 on x%2 do print "odd", x
  30 for x = 1 to 10
  31 next 
  40 print "masking"
  41 mask x==1
  42 for x = 1 to 10
  43 next 
  70 print "unmasking"
  71 unmask x==1
  72 for x = 1 to 10
  73 next 
  80 print "off-ing"
  81 off x==1
  82 for x = 1 to 10
  83 next 
end
ONE 1
odd 1
odd 3
odd 5
odd 7
odd 9
masking
odd 1
odd 3
odd 5
odd 7
odd 9
unmasking
ONE 10
ONE 1
odd 1
odd 3
odd 5
odd 7
odd 9
off-ing
odd 1
odd 3
odd 5
odd 7
odd 9
  10 dim x as flash
  20 on x!=0 do print 20
  30 on x==0 do print 30
  40 let x = 1
  50 print "done"
end
30
20
done
20
done
long prints
  10 dim i, j
  11 let i = 1
  12 let j = 1
  20 while i<1000000000 do
  25   let i = i*10
  26   print j, "---------1---------2---------3---------4---------5--------", 
  30 endwhile 
end
1 ---------1---------2---------3---------4---------5-------- 10
1 ---------1---------2---------3---------4---------5-------- 100
1 ---------1---------2---------3---------4---------5-------- 1000
1 ---------1---------2---------3---------4---------5-------- 10000
1 ---------1---------2---------3---------4---------5-------- 100000
1 ---------1---------2---------3---------4---------5-------- 1000000
1 ---------1---------2---------3---------4---------5-------- 10000000
1 ---------1---------2---------3---------4---------5-------- 100000000
1 ---------1---------2---------3---------4---------5-------- 1000000000
  10 dim i, j
  11 let i = 1
  12 let j = 1000000000
  20 while i<1000000000 do
  25   let i = i*10
  26   print j, "---------1---------2---------3---------4---------5--------", 
  30 endwhile 
end
1000000000 ---------1---------2---------3---------4---------5-------- 10
1000000000 ---------1---------2---------3---------4---------5-------- 100
1000000000 ---------1---------2---------3---------4---------5-------- 1000
1000000000 ---------1---------2---------3---------4---------5-------- 10000
1000000000 ---------1---------2---------3---------4---------5-------- 100000
1000000000 ---------1---------2---------3---------4---------5-------- 1000000
1000000000 ---------1---------2---------3---------4---------5-------- 10000000
1000000000 ---------1---------2---------3---------4---------5-------- 10000000
1000000000 ---------1---------2---------3---------4---------5-------- 10000000
  10 dim i, j
  11 let i = 1
  12 let j = 1
  20 while i<1000000000 do
  25   let i = i*10
  26   print i, j, "---------1---------2---------3---------4---------5--------
  30 endwhile 
end
10 1 ---------1---------2---------3---------4---------5--------
100 1 ---------1---------2---------3---------4---------5--------
1000 1 ---------1---------2---------3---------4---------5--------
10000 1 ---------1---------2---------3---------4---------5--------
100000 1 ---------1---------2---------3---------4---------5--------
1000000 1 ---------1---------2---------3---------4---------5--------
10000000 1 ---------1---------2---------3---------4---------5--------
100000000 1 ---------1---------2---------3---------4---------5--------
1000000000 1 ---------1---------2---------3---------4---------5--------
  10 dim i, j
  11 let i = 1
  12 let j = 1000000000
  20 while i<1000000000 do
  25   let i = i*10
  26   print i, j, "---------1---------2---------3---------4---------5--------
  30 endwhile 
end
10 1000000000 ---------1---------2---------3---------4---------5--------
100 1000000000 ---------1---------2---------3---------4---------5--------
1000 1000000000 ---------1---------2---------3---------4---------5--------
10000 1000000000 ---------1---------2---------3---------4---------5--------
100000 1000000000 ---------1---------2---------3---------4---------5--------
1000000 1000000000 ---------1---------2---------3---------4---------5--------
10000000 1000000000 ---------1---------2---------3---------4---------5--------
100000000 1000000000 ---------1---------2---------3---------4---------5-------
1000000000 1000000000 ---------1---------2---------3---------4---------5------
parse errors
error -   ^
        ^ - error
error -   ^
error -   ^
         ^ - error
error -    ^
         ^ - error
error -     ^
error -       ^
        ^ - error
         ^ - error
         ^ - error
        ^ - error
         ^ - error
runtime errors
var 'b' undefined
var 'a' undefined
0
divide by 0
0
divide by 0
0
assertion failed
var 'a' already declared at this scope
0
var 'b' undefined

var 'a' index 1 out of range
0
var 'b' undefined
var 'a' index 1 out of range
pin types
unsupported pin type
error -                       ^
unsupported pin type
error -                         ^
error -                              ^
error -                              ^
  10 dim audio as pin a3 for frequency output
  20 dim voltage as pin a4 for analog output
end
statement errors
on
        ^ - error
error -    ^
error -    ^
error -     ^
error -         ^
error -         ^
error -         ^
error -    ^
error -   ^
error -    ^
error -     ^
error -           ^
error -              ^
error -              ^
error -              ^
error -   ^
off
error -    ^
error -       ^
error -     ^
error -   ^
error -            ^
error -    ^
mask
error -     ^
error -        ^
error -      ^
error -    ^
error -             ^
error -     ^
configure
error -     ^
error -          ^
error -            ^
error -                ^
error -             ^
error -                   ^
error -                       ^
error -           ^
error -         ^
error -           ^
error -               ^
error -            ^
error -                  ^
error -                   ^
error -                       ^
error -                         ^
error -                        ^
error -                              ^
error -                               ^
error -                                   ^
error -                                    ^
error -                                           ^
error -                        ^
error -          ^
assert
        ^ - error
         ^ - error
        ^ - error
read
      ^ - error
error -    ^
       ^ - error
       ^ - error
data
      ^ - error
       ^ - error
       ^ - error
error -   ^
       ^ - error
label
       ^ - error
restore
missing label: xxx
dim
     ^ - error
      ^ - error
      ^ - error
        ^ - error
        ^ - error
        ^ - error
error -    ^
error -         ^
      ^ - error
        ^ - error
        ^ - error
error -          ^
error -         ^
var 'a' already declared at this scope
pin 0
error -        ^
error -          ^
error -           ^
error -              ^
analog 1
error -                            ^
error -                      ^
error -               ^
analog 2
error -                            ^
error -                                      ^
frequency
error -                         ^
error -   ^
digital io
error -                             ^
error -                                       ^
error -                                      ^
error -                                                ^
error -                                         ^
unsupported pin qualifier
error -                                                   ^
error -                                                  ^
unsupported pin qualifier
error -                                                            ^
remote
error -           ^
error -               ^
error -                 ^
error -                    ^
error -                       ^
error -                      ^
absolute vars
error -      ^
error -       ^
var 'xxx' undefined
error -                    ^
error -      ^
error -       ^
error -            ^
error -              ^
error -               ^
error -                       ^
var 'xxx' undefined
error -                             ^
error -              ^
error -                ^
error -                 ^
error -                        ^
var 'xxx' undefined
error -                              ^
error -          ^
error -           ^
var 'xxx' undefined
error -                        ^
error -                  ^
error -                   ^
var 'xxx' undefined
error -                                ^
error -                   ^
error -                    ^
var 'xxx' undefined
error -                                 ^
let
     ^ - error
      ^ - error
      ^ - error
       ^ - error
        ^ - error
         ^ - error
        ^ - error
     ^ - error
error -   ^
print
       ^ - error
         ^ - error
        ^ - error
         ^ - error
        ^ - error
        ^ - error
        ^ - error
error -   ^
error -   ^
error -     ^
error -     ^
        ^ - error
        ^ - error
if
    ^ - error
         ^ - error
     ^ - error
      ^ - error
error -      ^
      ^ - error
while
       ^ - error
error -       ^
        ^ - error
         ^ - error
error -       ^
         ^ - error
elseif
        ^ - error
error -      ^
         ^ - error
error -   ^
error -          ^
error -   ^
solos
      ^ - error
       ^ - error
error -   ^
break
break/continue without while/for
        ^ - error
        ^ - error
error -    ^
for
     ^ - error
       ^ - error
         ^ - error
error -   ^
error -       ^
var 'x' undefined
error -   ^
error -   ^
error -        ^
error -    ^
       ^ - error
error -               ^
error -                 ^
error -                 ^
sleep
error -       ^
error -      ^
error -          ^
error -             ^
error -             ^
more
      ^ - error
      ^ - error
       ^ - error
     ^ - error
        ^ - error
        ^ - error
        ^ - error
         ^ - error
        ^ - error
      ^ - error
     ^ - error
error -      ^
error -         ^
error -          ^
error -      ^
error -      ^
command errors
autorun
error -   ^
error -      ^
clear
        ^ - error
error -       ^
clone
        ^ - error
        ^ - error
cont
       ^ - error
error -    ^
delete
         ^ - error
         ^ - error
error -      ^
error -     ^
error -          ^
error -       ^
error -       ^
dir
      ^ - error
help
       ^ - error
error -      ^
list
       ^ - error
       ^ - error
error -    ^
error -   ^
error -        ^
error -     ^
error -     ^
end
load
program 'aaa' not found
program 'aaa,aaa' not found
memory
         ^ - error
new
      ^ - error
purge
program 'aaa' not found
program 'aaa,aaa' not found
renumber
error -    ^
error -       ^
reset
        ^ - error
run
         ^ - error
      ^ - error
        ^ - error
save
aaa,aaa
step
       ^ - error
error -   ^
trace
        ^ - error
error -     ^
undo
       ^ - error
uptime
         ^ - error
overflow tests
0
1
error -            ^
error -            ^
going
going
going
going
going
going
going
going
going
too many gosubs
STOP at line 70!
going
going
going
going
going
going
going
going
going
too many scopes
STOP at line 65!
main
main
main
main
main
main
main
main
main
main
too many gosubs
STOP at line 60!
out of variable ram
STOP at line 60!
auto save
 36% ram code bytes used (unsaved changes!)
 31% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
  10 rem ### toaster ###
  20 dim target, secs
  30 dim thermocouple as pin a8 for analog input
  40 dim relay as pin a0 for digital output
  50 dim buzzer as pin a6 for frequency output
  60 data 512, 90, 746, 105, 894, 20, -1, -1
  70 configure timer 0 for 1 s
  80 configure timer 1 for 1 s
  90 on timer 0 do gosub adjust
 100 on timer 1 do gosub beep
 110 while target!=-1 do
 120   sleep secs s
 130   read target, secs
 140 endwhile 
 150 off timer 0
 160 off timer 1
 170 let relay = 0
 180 let buzzer = 100
 190 sleep 1 s
 200 let buzzer = 0
 210 end 
 220 sub adjust
 230   if thermocouple>=target then
 240     let relay = 0
 250   else 
 260     let relay = 1
 270   endif 
 280 endsub 
 290 sub beep
 300   let buzzer = thermocouple
 310   sleep 100 ms
 320   let buzzer = target
 330   sleep 100 ms
 340   let buzzer = 0
 350 endsub 
1000 rem ### toaster ###
1010 dim target, secs
1020 dim thermocouple as pin a8 for analog input
1030 dim relay as pin a0 for digital output
1040 dim buzzer as pin a6 for frequency output
1050 data 512, 90, 746, 105, 894, 20, -1, -1
1060 configure timer 0 for 1 s
1070 configure timer 1 for 1 s
1080 on timer 0 do gosub adjust
1090 on timer 1 do gosub beep
1100 while target!=-1 do
1110   sleep secs s
1120   read target, secs
1130 endwhile 
1140 off timer 0
1150 off timer 1
1160 let relay = 0
1170 let buzzer = 100
1180 sleep 1 s
1190 let buzzer = 0
1200 end 
1210 sub adjust
1220   if thermocouple>=target then
1230     let relay = 0
1240   else 
1250     let relay = 1
1260   endif 
1270 endsub 
1280 sub beep
1290   let buzzer = thermocouple
1300   sleep 100 ms
1310   let buzzer = target
1320   sleep 100 ms
1330   let buzzer = 0
1340 endsub 
2000 rem ### toaster ###
2010 dim target, secs
2020 dim thermocouple as pin a8 for analog input
2030 dim relay as pin a0 for digital output
2040 dim buzzer as pin a6 for frequency output
2050 data 512, 90, 746, 105, 894, 20, -1, -1
2060 configure timer 0 for 1 s
2070 configure timer 1 for 1 s
2080 on timer 0 do gosub adjust
2090 on timer 1 do gosub beep
2100 while target!=-1 do
2110   sleep secs s
2120   read target, secs
2130 endwhile 
2140 off timer 0
2150 off timer 1
2160 let relay = 0
2170 let buzzer = 100
2180 sleep 1 s
2190 let buzzer = 0
2200 end 
2210 sub adjust
2220   if thermocouple>=target then
2230     let relay = 0
2240   else 
2250     let relay = 1
2260   endif 
2270 endsub 
2280 sub beep
2290   let buzzer = thermocouple
2300   sleep 100 ms
2310   let buzzer = target
2320   sleep 100 ms
2330   let buzzer = 0
2340 endsub 
3000 rem ### toaster ###
3010 dim target, secs
3020 dim thermocouple as pin a8 for analog input
3030 dim relay as pin a0 for digital output
3040 dim buzzer as pin a6 for frequency output
3050 data 512, 90, 746, 105, 894, 20, -1, -1
3060 configure timer 0 for 1 s
3070 configure timer 1 for 1 s
3080 on timer 0 do gosub adjust
3090 on timer 1 do gosub beep
3100 while target!=-1 do
3110   sleep secs s
3120   read target, secs
3130 endwhile 
3140 off timer 0
3150 off timer 1
3160 let relay = 0
3170 let buzzer = 100
3180 sleep 1 s
3190 let buzzer = 0
3200 end 
3210 sub adjust
3220   if thermocouple>=target then
3230     let relay = 0
3240   else 
3250     let relay = 1
3260   endif 
3270 endsub 
3280 sub beep
3290   let buzzer = thermocouple
3300   sleep 100 ms
3310   let buzzer = target
3320   sleep 100 ms
3330   let buzzer = 0
3340 endsub 
4000 rem ### toaster ###
4010 dim target, secs
4020 dim thermocouple as pin a8 for analog input
4030 dim relay as pin a0 for digital output
4040 dim buzzer as pin a6 for frequency output
4050 data 512, 90, 746, 105, 894, 20, -1, -1
4060 configure timer 0 for 1 s
4070 configure timer 1 for 1 s
4080 on timer 0 do gosub adjust
4090 on timer 1 do gosub beep
4100 while target!=-1 do
4110   sleep secs s
4120   read target, secs
4130 endwhile 
4140 off timer 0
4150 off timer 1
4160 let relay = 0
4170 let buzzer = 100
4180 sleep 1 s
4190 let buzzer = 0
4200 end 
4210 sub adjust
4220   if thermocouple>=target then
4230     let relay = 0
4240   else 
4250     let relay = 1
4260   endif 
4270 endsub 
4280 sub beep
4290   let buzzer = thermocouple
4300   sleep 100 ms
4310   let buzzer = target
4320   sleep 100 ms
4330   let buzzer = 0
4340 endsub 
5000 rem ### toaster ###
5010 dim target, secs
5020 dim thermocouple as pin a8 for analog input
5030 dim relay as pin a0 for digital output
5040 dim buzzer as pin a6 for frequency output
5050 data 512, 90, 746, 105, 894, 20, -1, -1
5060 configure timer 0 for 1 s
5070 configure timer 1 for 1 s
5080 on timer 0 do gosub adjust
5090 on timer 1 do gosub beep
5100 while target!=-1 do
5110   sleep secs s
5120   read target, secs
5130 endwhile 
5140 off timer 0
5150 off timer 1
5160 let relay = 0
5170 let buzzer = 100
5180 sleep 1 s
5190 let buzzer = 0
5200 end 
5210 sub adjust
5220   if thermocouple>=target then
5230     let relay = 0
5240   else 
5250     let relay = 1
5260   endif 
5270 endsub 
5280 sub beep
5290   let buzzer = thermocouple
5300   sleep 100 ms
5310   let buzzer = target
5320   sleep 100 ms
5330   let buzzer = 0
5340 endsub 
6000 rem ### toaster ###
6010 dim target, secs
6020 dim thermocouple as pin a8 for analog input
6030 dim relay as pin a0 for digital output
6040 dim buzzer as pin a6 for frequency output
6050 data 512, 90, 746, 105, 894, 20, -1, -1
6060 configure timer 0 for 1 s
6070 configure timer 1 for 1 s
6080 on timer 0 do gosub adjust
6090 on timer 1 do gosub beep
6100 while target!=-1 do
6110   sleep secs s
6120   read target, secs
6130 endwhile 
6140 off timer 0
6150 off timer 1
6160 let relay = 0
6170 let buzzer = 100
6180 sleep 1 s
6190 let buzzer = 0
6200 end 
6210 sub adjust
6220   if thermocouple>=target then
6230     let relay = 0
6240   else 
6250     let relay = 1
6260   endif 
6270 endsub 
6280 sub beep
6290   let buzzer = thermocouple
6300   sleep 100 ms
6310   let buzzer = target
6320   sleep 100 ms
6330   let buzzer = 0
6340 endsub 
7000 rem ### toaster ###
7010 dim target, secs
7020 dim thermocouple as pin a8 for analog input
7030 dim relay as pin a0 for digital output
7040 dim buzzer as pin a6 for frequency output
7050 data 512, 90, 746, 105, 894, 20, -1, -1
7060 configure timer 0 for 1 s
7070 configure timer 1 for 1 s
7080 on timer 0 do gosub adjust
7090 on timer 1 do gosub beep
7100 while target!=-1 do
7110   sleep secs s
7120   read target, secs
7130 endwhile 
7140 off timer 0
7150 off timer 1
7160 let relay = 0
7170 let buzzer = 100
7180 sleep 1 s
7190 let buzzer = 0
7200 end 
7210 sub adjust
7220   if thermocouple>=target then
7230     let relay = 0
7240   else 
7250     let relay = 1
7260   endif 
7270 endsub 
7280 sub beep
7290   let buzzer = thermocouple
7300   sleep 100 ms
7310   let buzzer = target
7320   sleep 100 ms
7330   let buzzer = 0
7340 endsub 
8000 rem ### toaster ###
8010 dim target, secs
8020 dim thermocouple as pin a8 for analog input
8030 dim relay as pin a0 for digital output
8040 dim buzzer as pin a6 for frequency output
8050 data 512, 90, 746, 105, 894, 20, -1, -1
8060 configure timer 0 for 1 s
8070 configure timer 1 for 1 s
8080 on timer 0 do gosub adjust
8090 on timer 1 do gosub beep
8100 while target!=-1 do
8110   sleep secs s
8120   read target, secs
8130 endwhile 
8140 off timer 0
8150 off timer 1
8160 let relay = 0
8170 let buzzer = 100
8180 sleep 1 s
8190 let buzzer = 0
8200 end 
8210 sub adjust
8220   if thermocouple>=target then
8230     let relay = 0
8240   else 
8250     let relay = 1
8260   endif 
8270 endsub 
8280 sub beep
8290   let buzzer = thermocouple
8300   sleep 100 ms
8310   let buzzer = target
8320   sleep 100 ms
8330   let buzzer = 0
8340 endsub 
9000 rem ### toaster ###
9010 dim target, secs
9020 dim thermocouple as pin a8 for analog input
9030 dim relay as pin a0 for digital output
9040 dim buzzer as pin a6 for frequency output
9050 data 512, 90, 746, 105, 894, 20, -1, -1
9060 configure timer 0 for 1 s
9070 configure timer 1 for 1 s
9080 on timer 0 do gosub adjust
9090 on timer 1 do gosub beep
9100 while target!=-1 do
9110   sleep secs s
9120   read target, secs
9130 endwhile 
9140 off timer 0
9150 off timer 1
9160 let relay = 0
9170 let buzzer = 100
9180 sleep 1 s
9190 let buzzer = 0
9200 end 
9210 sub adjust
9220   if thermocouple>=target then
9230     let relay = 0
9240   else 
9250     let relay = 1
9260   endif 
9270 endsub 
9280 sub beep
9290   let buzzer = thermocouple
9300   sleep 100 ms
9310   let buzzer = target
9320   sleep 100 ms
9330   let buzzer = 0
9340 endsub 
end
  0% ram code bytes used
 37% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
auto save
auto save
 50% ram code bytes used (unsaved changes!)
 71% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
 72% ram code bytes used (unsaved changes!)
 71% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
  0% ram code bytes used
 86% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
 22% ram code bytes used (unsaved changes!)
 86% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
 45% ram code bytes used (unsaved changes!)
 86% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
auto save
out of code flash
out of code ram
out of code flash
 99% ram code bytes used (unsaved changes!)
 86% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
  10 rem ### toaster ###
  20 dim target, secs
  30 dim thermocouple as pin a8 for analog input
  40 dim relay as pin a0 for digital output
  50 dim buzzer as pin a6 for frequency output
  60 data 512, 90, 746, 105, 894, 20, -1, -1
  70 configure timer 0 for 1 s
  80 configure timer 1 for 1 s
  90 on timer 0 do gosub adjust
 100 on timer 1 do gosub beep
 110 while target!=-1 do
 120   sleep secs s
 130   read target, secs
 140 endwhile 
 150 off timer 0
 160 off timer 1
 170 let relay = 0
 180 let buzzer = 100
 190 sleep 1 s
 200 let buzzer = 0
 210 end 
 220 sub adjust
 230   if thermocouple>=target then
 240     let relay = 0
 250   else 
 260     let relay = 1
 270   endif 
 280 endsub 
 290 sub beep
 300   let buzzer = thermocouple
 310   sleep 100 ms
 320   let buzzer = target
 330   sleep 100 ms
 340   let buzzer = 0
 350 endsub 
1000 rem ### toaster ###
1010 dim target, secs
1020 dim thermocouple as pin a8 for analog input
1030 dim relay as pin a0 for digital output
1040 dim buzzer as pin a6 for frequency output
1050 data 512, 90, 746, 105, 894, 20, -1, -1
1060 configure timer 0 for 1 s
1070 configure timer 1 for 1 s
1080 on timer 0 do gosub adjust
1090 on timer 1 do gosub beep
1100 while target!=-1 do
1110   sleep secs s
1120   read target, secs
1130 endwhile 
1140 off timer 0
1150 off timer 1
1160 let relay = 0
1170 let buzzer = 100
1180 sleep 1 s
1190 let buzzer = 0
1200 end 
1210 sub adjust
1220   if thermocouple>=target then
1230     let relay = 0
1240   else 
1250     let relay = 1
1260   endif 
1270 endsub 
1280 sub beep
1290   let buzzer = thermocouple
1300   sleep 100 ms
1310   let buzzer = target
1320   sleep 100 ms
1330   let buzzer = 0
1340 endsub 
2000 rem ### toaster ###
2010 dim target, secs
2020 dim thermocouple as pin a8 for analog input
2030 dim relay as pin a0 for digital output
2040 dim buzzer as pin a6 for frequency output
2050 data 512, 90, 746, 105, 894, 20, -1, -1
2060 configure timer 0 for 1 s
2070 configure timer 1 for 1 s
2080 on timer 0 do gosub adjust
2090 on timer 1 do gosub beep
2100 while target!=-1 do
2110   sleep secs s
2120   read target, secs
2130 endwhile 
2140 off timer 0
2150 off timer 1
2160 let relay = 0
2170 let buzzer = 100
2180 sleep 1 s
2190 let buzzer = 0
2200 end 
2210 sub adjust
2220   if thermocouple>=target then
2230     let relay = 0
2240   else 
2250     let relay = 1
2260   endif 
2270 endsub 
2280 sub beep
2290   let buzzer = thermocouple
2300   sleep 100 ms
2310   let buzzer = target
2320   sleep 100 ms
2330   let buzzer = 0
2340 endsub 
3000 rem ### toaster ###
3010 dim target, secs
3020 dim thermocouple as pin a8 for analog input
3030 dim relay as pin a0 for digital output
3040 dim buzzer as pin a6 for frequency output
3050 data 512, 90, 746, 105, 894, 20, -1, -1
3060 configure timer 0 for 1 s
3070 configure timer 1 for 1 s
3080 on timer 0 do gosub adjust
3090 on timer 1 do gosub beep
3100 while target!=-1 do
3110   sleep secs s
3120   read target, secs
3130 endwhile 
3140 off timer 0
3150 off timer 1
3160 let relay = 0
3170 let buzzer = 100
3180 sleep 1 s
3190 let buzzer = 0
3200 end 
3210 sub adjust
3220   if thermocouple>=target then
3230     let relay = 0
3240   else 
3250     let relay = 1
3260   endif 
3270 endsub 
3280 sub beep
3290   let buzzer = thermocouple
3300   sleep 100 ms
3310   let buzzer = target
3320   sleep 100 ms
3330   let buzzer = 0
3340 endsub 
4000 rem ### toaster ###
4010 dim target, secs
4020 dim thermocouple as pin a8 for analog input
4030 dim relay as pin a0 for digital output
4040 dim buzzer as pin a6 for frequency output
4050 data 512, 90, 746, 105, 894, 20, -1, -1
4060 configure timer 0 for 1 s
4070 configure timer 1 for 1 s
4080 on timer 0 do gosub adjust
4090 on timer 1 do gosub beep
4100 while target!=-1 do
4110   sleep secs s
4120   read target, secs
4130 endwhile 
4140 off timer 0
4150 off timer 1
4160 let relay = 0
4170 let buzzer = 100
4180 sleep 1 s
4190 let buzzer = 0
4200 end 
4210 sub adjust
4220   if thermocouple>=target then
4230     let relay = 0
4240   else 
4250     let relay = 1
4260   endif 
4270 endsub 
4280 sub beep
4290   let buzzer = thermocouple
4300   sleep 100 ms
4310   let buzzer = target
4320   sleep 100 ms
4330   let buzzer = 0
4340 endsub 
5000 rem ### toaster ###
5010 dim target, secs
5020 dim thermocouple as pin a8 for analog input
5030 dim relay as pin a0 for digital output
5040 dim buzzer as pin a6 for frequency output
5050 data 512, 90, 746, 105, 894, 20, -1, -1
5060 configure timer 0 for 1 s
5070 configure timer 1 for 1 s
5080 on timer 0 do gosub adjust
5090 on timer 1 do gosub beep
5100 while target!=-1 do
5110   sleep secs s
5120   read target, secs
5130 endwhile 
5140 off timer 0
5150 off timer 1
5160 let relay = 0
5170 let buzzer = 100
5180 sleep 1 s
5190 let buzzer = 0
5200 end 
5210 sub adjust
5220   if thermocouple>=target then
5230     let relay = 0
5240   else 
5250     let relay = 1
5260   endif 
5270 endsub 
5280 sub beep
5290   let buzzer = thermocouple
5300   sleep 100 ms
5310   let buzzer = target
5320   sleep 100 ms
5330   let buzzer = 0
5340 endsub 
6000 rem ### toaster ###
6010 dim target, secs
6020 dim thermocouple as pin a8 for analog input
6030 dim relay as pin a0 for digital output
6040 dim buzzer as pin a6 for frequency output
6050 data 512, 90, 746, 105, 894, 20, -1, -1
6060 configure timer 0 for 1 s
6070 configure timer 1 for 1 s
6080 on timer 0 do gosub adjust
6090 on timer 1 do gosub beep
6100 while target!=-1 do
6110   sleep secs s
6120   read target, secs
6130 endwhile 
6140 off timer 0
6150 off timer 1
6160 let relay = 0
6170 let buzzer = 100
6180 sleep 1 s
6190 let buzzer = 0
6200 end 
6210 sub adjust
6220   if thermocouple>=target then
6230     let relay = 0
6240   else 
6250     let relay = 1
6260   endif 
6270 endsub 
6280 sub beep
6290   let buzzer = thermocouple
6300   sleep 100 ms
6310   let buzzer = target
6320   sleep 100 ms
6330   let buzzer = 0
6340 endsub 
7000 rem ### toaster ###
7010 dim target, secs
7020 dim thermocouple as pin a8 for analog input
7030 dim relay as pin a0 for digital output
7040 dim buzzer as pin a6 for frequency output
7050 data 512, 90, 746, 105, 894, 20, -1, -1
7060 configure timer 0 for 1 s
7070 configure timer 1 for 1 s
7080 on timer 0 do gosub adjust
7090 on timer 1 do gosub beep
7100 while target!=-1 do
7110   sleep secs s
7120   read target, secs
7130 endwhile 
7140 off timer 0
7150 off timer 1
7160 let relay = 0
7170 let buzzer = 100
7180 sleep 1 s
7190 let buzzer = 0
7200 end 
7210 sub adjust
7220   if thermocouple>=target then
7230     let relay = 0
7240   else 
7250     let relay = 1
7260   endif 
7270 endsub 
7280 sub beep
7290   let buzzer = thermocouple
7300   sleep 100 ms
7310   let buzzer = target
7320   sleep 100 ms
7330   let buzzer = 0
7340 endsub 
8000 rem ### toaster ###
8010 dim target, secs
8020 dim thermocouple as pin a8 for analog input
8030 dim relay as pin a0 for digital output
8040 dim buzzer as pin a6 for frequency output
8050 data 512, 90, 746, 105, 894, 20, -1, -1
8060 configure timer 0 for 1 s
8070 configure timer 1 for 1 s
8080 on timer 0 do gosub adjust
8090 on timer 1 do gosub beep
8100 while target!=-1 do
8110   sleep secs s
8120   read target, secs
8130 endwhile 
8140 off timer 0
8150 off timer 1
8160 let relay = 0
8170 let buzzer = 100
8180 sleep 1 s
8190 let buzzer = 0
8200 end 
8210 sub adjust
8220   if thermocouple>=target then
8230     let relay = 0
8240   else 
8250     let relay = 1
8260   endif 
8270 endsub 
8280 sub beep
8290   let buzzer = thermocouple
8300   sleep 100 ms
8310   let buzzer = target
8320   sleep 100 ms
8330   let buzzer = 0
8340 endsub 
9000 rem ### toaster ###
9010 dim target, secs
9020 dim thermocouple as pin a8 for analog input
9030 dim relay as pin a0 for digital output
9040 dim buzzer as pin a6 for frequency output
9050 data 512, 90, 746, 105, 894, 20, -1, -1
9060 configure timer 0 for 1 s
9070 configure timer 1 for 1 s
9080 on timer 0 do gosub adjust
9090 on timer 1 do gosub beep
9100 while target!=-1 do
9110   sleep secs s
9120   read target, secs
9130 endwhile 
9140 off timer 0
9150 off timer 1
9160 let relay = 0
9170 let buzzer = 100
9180 sleep 1 s
9190 let buzzer = 0
9200 end 
9210 sub adjust
9220   if thermocouple>=target then
9230     let relay = 0
9240   else 
9250     let relay = 1
9260   endif 
9270 endsub 
9280 sub beep
9290   let buzzer = thermocouple
9300   sleep 100 ms
9310   let buzzer = target
9320   sleep 100 ms
9330   let buzzer = 0
9340 endsub 
10000 rem ### toaster ###
10010 dim target, secs
10020 dim thermocouple as pin a8 for analog input
10030 dim relay as pin a0 for digital output
10040 dim buzzer as pin a6 for frequency output
10050 data 512, 90, 746, 105, 894, 20, -1, -1
10060 configure timer 0 for 1 s
10070 configure timer 1 for 1 s
10080 on timer 0 do gosub adjust
10090 on timer 1 do gosub beep
10100 while target!=-1 do
10110   sleep secs s
10120   read target, secs
10130 endwhile 
10140 off timer 0
10150 off timer 1
10160 let relay = 0
10170 let buzzer = 100
10180 sleep 1 s
10190 let buzzer = 0
10200 end 
10210 sub adjust
10220   if thermocouple>=target then
10230     let relay = 0
10240   else 
10250     let relay = 1
10260   endif 
10270 endsub 
10280 sub beep
10290   let buzzer = thermocouple
10300   sleep 100 ms
10310   let buzzer = target
10320   sleep 100 ms
10330   let buzzer = 0
10340 endsub 
11000 rem ### toaster ###
11010 dim target, secs
11020 dim thermocouple as pin a8 for analog input
11030 dim relay as pin a0 for digital output
11040 dim buzzer as pin a6 for frequency output
11050 data 512, 90, 746, 105, 894, 20, -1, -1
11060 configure timer 0 for 1 s
11070 configure timer 1 for 1 s
11080 on timer 0 do gosub adjust
11090 on timer 1 do gosub beep
11100 while target!=-1 do
11110   sleep secs s
11120   read target, secs
11130 endwhile 
11140 off timer 0
11150 off timer 1
11160 let relay = 0
11170 let buzzer = 100
11180 sleep 1 s
11190 let buzzer = 0
11200 end 
11210 sub adjust
11220   if thermocouple>=target then
11230     let relay = 0
11240   else 
11250     let relay = 1
11260   endif 
11270 endsub 
11280 sub beep
11290   let buzzer = thermocouple
11300   sleep 100 ms
11310   let buzzer = target
11320   sleep 100 ms
11330   let buzzer = 0
11340 endsub 
12000 rem ### toaster ###
12010 dim target, secs
12020 dim thermocouple as pin a8 for analog input
12030 dim relay as pin a0 for digital output
12040 dim buzzer as pin a6 for frequency output
12050 data 512, 90, 746, 105, 894, 20, -1, -1
12060 configure timer 0 for 1 s
12070 configure timer 1 for 1 s
12080 on timer 0 do gosub adjust
12090 on timer 1 do gosub beep
12100 while target!=-1 do
12110   sleep secs s
12120   read target, secs
12130 endwhile 
12140 off timer 0
12150 off timer 1
12160 let relay = 0
12170 let buzzer = 100
12180 sleep 1 s
12190 let buzzer = 0
12200 end 
12210 sub adjust
12220   if thermocouple>=target then
12230     let relay = 0
12240   else 
12250     let relay = 1
12260   endif 
12270 endsub 
12280 sub beep
12290   let buzzer = thermocouple
12300   sleep 100 ms
12310   let buzzer = target
12320   sleep 100 ms
12330   let buzzer = 0
12340 endsub 
13000 rem ### toaster ###
13010 dim target, secs
13020 dim thermocouple as pin a8 for analog input
13030 dim relay as pin a0 for digital output
13040 dim buzzer as pin a6 for frequency output
13050 data 512, 90, 746, 105, 894, 20, -1, -1
13060 configure timer 0 for 1 s
13070 configure timer 1 for 1 s
13080 on timer 0 do gosub adjust
13090 on timer 1 do gosub beep
13100 while target!=-1 do
13110   sleep secs s
13120   read target, secs
13130 endwhile 
13140 off timer 0
13150 off timer 1
13160 let relay = 0
13170 let buzzer = 100
13180 sleep 1 s
13190 let buzzer = 0
13200 end 
13210 sub adjust
13220   if thermocouple>=target then
13230     let relay = 0
13240   else 
13250     let relay = 1
13260   endif 
13270 endsub 
13280 sub beep
13290   let buzzer = thermocouple
13300   sleep 100 ms
13310   let buzzer = target
13320   sleep 100 ms
13330   let buzzer = 0
13340 endsub 
14000 rem ### toaster ###
14010 dim target, secs
14020 dim thermocouple as pin a8 for analog input
14030 dim relay as pin a0 for digital output
14040 dim buzzer as pin a6 for frequency output
14050 data 512, 90, 746, 105, 894, 20, -1, -1
14060 configure timer 0 for 1 s
14070 configure timer 1 for 1 s
14080 on timer 0 do gosub adjust
14090 on timer 1 do gosub beep
14100 while target!=-1 do
14110   sleep secs s
14120   read target, secs
14130 endwhile 
14140 off timer 0
14150 off timer 1
14160 let relay = 0
14170 let buzzer = 100
14180 sleep 1 s
14190 let buzzer = 0
14200 end 
14210 sub adjust
14220   if thermocouple>=target then
14230     let relay = 0
14240   else 
14250     let relay = 1
14260   endif 
14270 endsub 
14280 sub beep
14290   let buzzer = thermocouple
14300   sleep 100 ms
14310   let buzzer = target
14320   sleep 100 ms
14330   let buzzer = 0
14340 endsub 
15000 rem ### toaster ###
15010 dim target, secs
15020 dim thermocouple as pin a8 for analog input
15030 dim relay as pin a0 for digital output
15040 dim buzzer as pin a6 for frequency output
15050 data 512, 90, 746, 105, 894, 20, -1, -1
15060 configure timer 0 for 1 s
15070 configure timer 1 for 1 s
15080 on timer 0 do gosub adjust
15090 on timer 1 do gosub beep
15100 while target!=-1 do
15110   sleep secs s
15120   read target, secs
15130 endwhile 
15140 off timer 0
15150 off timer 1
15160 let relay = 0
15170 let buzzer = 100
15180 sleep 1 s
15190 let buzzer = 0
15200 end 
15210 sub adjust
15220   if thermocouple>=target then
15230     let relay = 0
15240   else 
15250     let relay = 1
15260   endif 
15270 endsub 
15280 sub beep
15290   let buzzer = thermocouple
15300   sleep 100 ms
15310   let buzzer = target
15320   sleep 100 ms
15330   let buzzer = 0
15340 endsub 
16000 rem ### toaster ###
16010 dim target, secs
16020 dim thermocouple as pin a8 for analog input
16030 dim relay as pin a0 for digital output
16040 dim buzzer as pin a6 for frequency output
16050 data 512, 90, 746, 105, 894, 20, -1, -1
16060 configure timer 0 for 1 s
16070 configure timer 1 for 1 s
16080 on timer 0 do gosub adjust
16090 on timer 1 do gosub beep
16100 while target!=-1 do
16110   sleep secs s
16120   read target, secs
16130 endwhile 
16140 off timer 0
16150 off timer 1
16160 let relay = 0
16170 let buzzer = 100
16180 sleep 1 s
16190 let buzzer = 0
16200 end 
16210 sub adjust
16220   if thermocouple>=target then
16230     let relay = 0
16240   else 
16250     let relay = 1
16260   endif 
16270 endsub 
16280 sub beep
16290   let buzzer = thermocouple
16300   sleep 100 ms
16310   let buzzer = target
16320   sleep 100 ms
16330   let buzzer = 0
16340 endsub 
17000 rem ### toaster ###
17010 dim target, secs
17020 dim thermocouple as pin a8 for analog input
17030 dim relay as pin a0 for digital output
17040 dim buzzer as pin a6 for frequency output
17050 data 512, 90, 746, 105, 894, 20, -1, -1
17060 configure timer 0 for 1 s
17070 configure timer 1 for 1 s
17080 on timer 0 do gosub adjust
17090 on timer 1 do gosub beep
17100 while target!=-1 do
17110   sleep secs s
17120   read target, secs
17130 endwhile 
17140 off timer 0
17150 off timer 1
17160 let relay = 0
17170 let buzzer = 100
17180 sleep 1 s
17190 let buzzer = 0
17200 end 
17210 sub adjust
17220   if thermocouple>=target then
17230     let relay = 0
17240   else 
17250     let relay = 1
17260   endif 
17270 endsub 
17280 sub beep
17290   let buzzer = thermocouple
17300   sleep 100 ms
17310   let buzzer = target
17320   sleep 100 ms
17330   let buzzer = 0
17340 endsub 
18000 rem ### toaster ###
18010 dim target, secs
18020 dim thermocouple as pin a8 for analog input
18030 dim relay as pin a0 for digital output
18040 dim buzzer as pin a6 for frequency output
18050 data 512, 90, 746, 105, 894, 20, -1, -1
18060 configure timer 0 for 1 s
18070 configure timer 1 for 1 s
18080 on timer 0 do gosub adjust
18090 on timer 1 do gosub beep
18100 while target!=-1 do
18110   sleep secs s
18120   read target, secs
18130 endwhile 
18140 off timer 0
18150 off timer 1
18160 let relay = 0
18170 let buzzer = 100
18180 sleep 1 s
18190 let buzzer = 0
18200 end 
18210 sub adjust
18220   if thermocouple>=target then
18230     let relay = 0
18240   else 
18250     let relay = 1
18260   endif 
18270 endsub 
18280 sub beep
18290   let buzzer = thermocouple
18300   sleep 100 ms
18310   let buzzer = target
18320   sleep 100 ms
18330   let buzzer = 0
18340 endsub 
19000 rem ### toaster ###
19010 dim target, secs
19020 dim thermocouple as pin a8 for analog input
19030 dim relay as pin a0 for digital output
19040 dim buzzer as pin a6 for frequency output
19050 data 512, 90, 746, 105, 894, 20, -1, -1
19060 configure timer 0 for 1 s
19070 configure timer 1 for 1 s
19080 on timer 0 do gosub adjust
19090 on timer 1 do gosub beep
19100 while target!=-1 do
19110   sleep secs s
19120   read target, secs
19130 endwhile 
19140 off timer 0
19150 off timer 1
19160 let relay = 0
19170 let buzzer = 100
19180 sleep 1 s
19190 let buzzer = 0
19200 end 
19210 sub adjust
19220   if thermocouple>=target then
19230     let relay = 0
19240   else 
19250     let relay = 1
19260   endif 
19270 endsub 
19280 sub beep
19290   let buzzer = thermocouple
19300   sleep 100 ms
19310   let buzzer = target
19320   sleep 100 ms
19330   let buzzer = 0
19340 endsub 
20000 rem ### toaster ###
20010 dim target, secs
20020 dim thermocouple as pin a8 for analog input
20030 dim relay as pin a0 for digital output
20040 dim buzzer as pin a6 for frequency output
20050 data 512, 90, 746, 105, 894, 20, -1, -1
20060 configure timer 0 for 1 s
20070 configure timer 1 for 1 s
20080 on timer 0 do gosub adjust
20090 on timer 1 do gosub beep
20100 while target!=-1 do
20110   sleep secs s
20120   read target, secs
20130 endwhile 
20140 off timer 0
20150 off timer 1
20160 let relay = 0
20170 let buzzer = 100
20180 sleep 1 s
20190 let buzzer = 0
20200 end 
20210 sub adjust
20220   if thermocouple>=target then
20230     let relay = 0
20240   else 
20250     let relay = 1
20260   endif 
20270 endsub 
20280 sub beep
20290   let buzzer = thermocouple
20300   sleep 100 ms
20310   let buzzer = target
20320   sleep 100 ms
20330   let buzzer = 0
20340 endsub 
21000 rem ### toaster ###
21010 dim target, secs
21020 dim thermocouple as pin a8 for analog input
21030 dim relay as pin a0 for digital output
21040 dim buzzer as pin a6 for frequency output
21050 data 512, 90, 746, 105, 894, 20, -1, -1
21060 configure timer 0 for 1 s
21070 configure timer 1 for 1 s
21080 on timer 0 do gosub adjust
21090 on timer 1 do gosub beep
21100 while target!=-1 do
21110   sleep secs s
21120   read target, secs
21130 endwhile 
21140 off timer 0
21150 off timer 1
21160 let relay = 0
21170 let buzzer = 100
21180 sleep 1 s
21190 let buzzer = 0
21200 end 
21210 sub adjust
21220   if thermocouple>=target then
21230     let relay = 0
21240   else 
21250     let relay = 1
21260   endif 
21270 endsub 
21280 sub beep
21290   let buzzer = thermocouple
21300   sleep 100 ms
21310   let buzzer = target
21320   sleep 100 ms
21330   let buzzer = 0
21340 endsub 
22000 rem ### toaster ###
22010 dim target, secs
22020 dim thermocouple as pin a8 for analog input
22030 dim relay as pin a0 for digital output
22040 dim buzzer as pin a6 for frequency output
22050 data 512, 90, 746, 105, 894, 20, -1, -1
22060 configure timer 0 for 1 s
22070 configure timer 1 for 1 s
22080 on timer 0 do gosub adjust
22090 on timer 1 do gosub beep
22100 while target!=-1 do
22110   sleep secs s
22120   read target, secs
22130 endwhile 
22140 off timer 0
22150 off timer 1
22160 let relay = 0
22170 let buzzer = 100
22180 sleep 1 s
22190 let buzzer = 0
22200 end 
22210 sub adjust
22220   if thermocouple>=target then
22230     let relay = 0
22240   else 
22250     let relay = 1
22260   endif 
22270 endsub 
22280 sub beep
22290   let buzzer = thermocouple
22300   sleep 100 ms
22310   let buzzer = target
22320   sleep 100 ms
22330   let buzzer = 0
22340 endsub 
23000 rem ### toaster ###
23010 dim target, secs
23020 dim thermocouple as pin a8 for analog input
23030 dim relay as pin a0 for digital output
23040 dim buzzer as pin a6 for frequency output
23050 data 512, 90, 746, 105, 894, 20, -1, -1
23060 configure timer 0 for 1 s
23070 configure timer 1 for 1 s
23080 on timer 0 do gosub adjust
23090 on timer 1 do gosub beep
23100 while target!=-1 do
23110   sleep secs s
23120   read target, secs
23130 endwhile 
23140 off timer 0
23150 off timer 1
23160 let relay = 0
23170 let buzzer = 100
23180 sleep 1 s
23190 let buzzer = 0
23200 end 
23210 sub adjust
23220   if thermocouple>=target then
23230     let relay = 0
23240   else 
23250     let relay = 1
23260   endif 
23270 endsub 
23280 sub beep
23290   let buzzer = thermocouple
23300   sleep 100 ms
23310   let buzzer = target
23320   sleep 100 ms
23330   let buzzer = 0
23340 endsub 
24000 rem ### toaster ###
24010 dim target, secs
24020 dim thermocouple as pin a8 for analog input
24030 dim relay as pin a0 for digital output
24040 dim buzzer as pin a6 for frequency output
24050 data 512, 90, 746, 105, 894, 20, -1, -1
24060 configure timer 0 for 1 s
24070 configure timer 1 for 1 s
24080 on timer 0 do gosub adjust
24090 on timer 1 do gosub beep
24100 while target!=-1 do
24110   sleep secs s
24120   read target, secs
24130 endwhile 
24140 off timer 0
24150 off timer 1
24160 let relay = 0
24170 let buzzer = 100
24180 sleep 1 s
24190 let buzzer = 0
24200 end 
24210 sub adjust
24220   if thermocouple>=target then
24230     let relay = 0
24240   else 
24250     let relay = 1
24260   endif 
24270 endsub 
24280 sub beep
24290   let buzzer = thermocouple
24300   sleep 100 ms
24310   let buzzer = target
24320   sleep 100 ms
24330   let buzzer = 0
24340 endsub 
25000 rem ### toaster ###
25010 dim target, secs
25020 dim thermocouple as pin a8 for analog input
25030 dim relay as pin a0 for digital output
25040 dim buzzer as pin a6 for frequency output
25050 data 512, 90, 746, 105, 894, 20, -1, -1
25060 configure timer 0 for 1 s
25070 configure timer 1 for 1 s
25080 on timer 0 do gosub adjust
25090 on timer 1 do gosub beep
25100 while target!=-1 do
25110   sleep secs s
25120   read target, secs
25130 endwhile 
25140 off timer 0
25150 off timer 1
25160 let relay = 0
25170 let buzzer = 100
25180 sleep 1 s
25190 let buzzer = 0
25200 end 
25210 sub adjust
25220   if thermocouple>=target then
25230     let relay = 0
25240   else 
25250     let relay = 1
25260   endif 
25270 endsub 
25280 sub beep
25290   let buzzer = thermocouple
25300   sleep 100 ms
25310   let buzzer = target
25320   sleep 100 ms
25330   let buzzer = 0
25340 endsub 
26000 rem ### toaster ###
26010 dim target, secs
26020 dim thermocouple as pin a8 for analog input
26030 dim relay as pin a0 for digital output
26040 dim buzzer as pin a6 for frequency output
26050 data 512, 90, 746, 105, 894, 20, -1, -1
26060 configure timer 0 for 1 s
26070 configure timer 1 for 1 s
26080 on timer 0 do gosub adjust
26090 on timer 1 do gosub beep
26100 while target!=-1 do
26110   sleep secs s
26120   read target, secs
26130 endwhile 
26140 off timer 0
26150 off timer 1
26160 let relay = 0
26170 let buzzer = 100
26180 sleep 1 s
26190 let buzzer = 0
26200 end 
26210 sub adjust
26220   if thermocouple>=target then
26230     let relay = 0
26240   else 
26250     let relay = 1
26260   endif 
26270 endsub 
26280 sub beep
26290   let buzzer = thermocouple
26300   sleep 100 ms
26310   let buzzer = target
26320   sleep 100 ms
26330   let buzzer = 0
26340 endsub 
27000 rem ### toaster ###
27010 dim target, secs
27020 dim thermocouple as pin a8 for analog input
27030 dim relay as pin a0 for digital output
27040 dim buzzer as pin a6 for frequency output
27050 data 512, 90, 746, 105, 894, 20, -1, -1
27060 configure timer 0 for 1 s
27070 configure timer 1 for 1 s
27080 on timer 0 do gosub adjust
27090 on timer 1 do gosub beep
27100 while target!=-1 do
missing block ends?
end
delete line 10
auto save
out of code flash
out of code ram
 99% ram code bytes used (unsaved changes!)
 86% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
delete line 24000
 99% ram code bytes used (unsaved changes!)
 86% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
delete line 24000-
 68% ram code bytes used (unsaved changes!)
 86% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
delete line 22000-
 72% ram code bytes used (unsaved changes!)
 86% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
delete line -1000
 86% ram code bytes used (unsaved changes!)
 86% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
save
  0% ram code bytes used
 79% flash code bytes used
  0% ram variable bytes used
  0% flash parameter bytes used
  0% variables used
1010 dim target, secs
1020 dim thermocouple as pin a8 for analog input
1030 dim relay as pin a0 for digital output
1040 dim buzzer as pin a6 for frequency output
1050 data 512, 90, 746, 105, 894, 20, -1, -1
1060 configure timer 0 for 1 s
1070 configure timer 1 for 1 s
1080 on timer 0 do gosub adjust
1090 on timer 1 do gosub beep
1100 while target!=-1 do
1110   sleep secs s
1120   read target, secs
1130 endwhile 
1140 off timer 0
1150 off timer 1
1160 let relay = 0
1170 let buzzer = 100
1180 sleep 1 s
1190 let buzzer = 0
1200 end 
1210 sub adjust
1220   if thermocouple>=target then
1230     let relay = 0
1240   else 
1250     let relay = 1
1260   endif 
1270 endsub 
1280 sub beep
1290   let buzzer = thermocouple
1300   sleep 100 ms
1310   let buzzer = target
1320   sleep 100 ms
1330   let buzzer = 0
1340 endsub 
2000 rem ### toaster ###
2010 dim target, secs
2020 dim thermocouple as pin a8 for analog input
2030 dim relay as pin a0 for digital output
2040 dim buzzer as pin a6 for frequency output
2050 data 512, 90, 746, 105, 894, 20, -1, -1
2060 configure timer 0 for 1 s
2070 configure timer 1 for 1 s
2080 on timer 0 do gosub adjust
2090 on timer 1 do gosub beep
2100 while target!=-1 do
2110   sleep secs s
2120   read target, secs
2130 endwhile 
2140 off timer 0
2150 off timer 1
2160 let relay = 0
2170 let buzzer = 100
2180 sleep 1 s
2190 let buzzer = 0
2200 end 
2210 sub adjust
2220   if thermocouple>=target then
2230     let relay = 0
2240   else 
2250     let relay = 1
2260   endif 
2270 endsub 
2280 sub beep
2290   let buzzer = thermocouple
2300   sleep 100 ms
2310   let buzzer = target
2320   sleep 100 ms
2330   let buzzer = 0
2340 endsub 
3000 rem ### toaster ###
3010 dim target, secs
3020 dim thermocouple as pin a8 for analog input
3030 dim relay as pin a0 for digital output
3040 dim buzzer as pin a6 for frequency output
3050 data 512, 90, 746, 105, 894, 20, -1, -1
3060 configure timer 0 for 1 s
3070 configure timer 1 for 1 s
3080 on timer 0 do gosub adjust
3090 on timer 1 do gosub beep
3100 while target!=-1 do
3110   sleep secs s
3120   read target, secs
3130 endwhile 
3140 off timer 0
3150 off timer 1
3160 let relay = 0
3170 let buzzer = 100
3180 sleep 1 s
3190 let buzzer = 0
3200 end 
3210 sub adjust
3220   if thermocouple>=target then
3230     let relay = 0
3240   else 
3250     let relay = 1
3260   endif 
3270 endsub 
3280 sub beep
3290   let buzzer = thermocouple
3300   sleep 100 ms
3310   let buzzer = target
3320   sleep 100 ms
3330   let buzzer = 0
3340 endsub 
4000 rem ### toaster ###
4010 dim target, secs
4020 dim thermocouple as pin a8 for analog input
4030 dim relay as pin a0 for digital output
4040 dim buzzer as pin a6 for frequency output
4050 data 512, 90, 746, 105, 894, 20, -1, -1
4060 configure timer 0 for 1 s
4070 configure timer 1 for 1 s
4080 on timer 0 do gosub adjust
4090 on timer 1 do gosub beep
4100 while target!=-1 do
4110   sleep secs s
4120   read target, secs
4130 endwhile 
4140 off timer 0
4150 off timer 1
4160 let relay = 0
4170 let buzzer = 100
4180 sleep 1 s
4190 let buzzer = 0
4200 end 
4210 sub adjust
4220   if thermocouple>=target then
4230     let relay = 0
4240   else 
4250     let relay = 1
4260   endif 
4270 endsub 
4280 sub beep
4290   let buzzer = thermocouple
4300   sleep 100 ms
4310   let buzzer = target
4320   sleep 100 ms
4330   let buzzer = 0
4340 endsub 
5000 rem ### toaster ###
5010 dim target, secs
5020 dim thermocouple as pin a8 for analog input
5030 dim relay as pin a0 for digital output
5040 dim buzzer as pin a6 for frequency output
5050 data 512, 90, 746, 105, 894, 20, -1, -1
5060 configure timer 0 for 1 s
5070 configure timer 1 for 1 s
5080 on timer 0 do gosub adjust
5090 on timer 1 do gosub beep
5100 while target!=-1 do
5110   sleep secs s
5120   read target, secs
5130 endwhile 
5140 off timer 0
5150 off timer 1
5160 let relay = 0
5170 let buzzer = 100
5180 sleep 1 s
5190 let buzzer = 0
5200 end 
5210 sub adjust
5220   if thermocouple>=target then
5230     let relay = 0
5240   else 
5250     let relay = 1
5260   endif 
5270 endsub 
5280 sub beep
5290   let buzzer = thermocouple
5300   sleep 100 ms
5310   let buzzer = target
5320   sleep 100 ms
5330   let buzzer = 0
5340 endsub 
6000 rem ### toaster ###
6010 dim target, secs
6020 dim thermocouple as pin a8 for analog input
6030 dim relay as pin a0 for digital output
6040 dim buzzer as pin a6 for frequency output
6050 data 512, 90, 746, 105, 894, 20, -1, -1
6060 configure timer 0 for 1 s
6070 configure timer 1 for 1 s
6080 on timer 0 do gosub adjust
6090 on timer 1 do gosub beep
6100 while target!=-1 do
6110   sleep secs s
6120   read target, secs
6130 endwhile 
6140 off timer 0
6150 off timer 1
6160 let relay = 0
6170 let buzzer = 100
6180 sleep 1 s
6190 let buzzer = 0
6200 end 
6210 sub adjust
6220   if thermocouple>=target then
6230     let relay = 0
6240   else 
6250     let relay = 1
6260   endif 
6270 endsub 
6280 sub beep
6290   let buzzer = thermocouple
6300   sleep 100 ms
6310   let buzzer = target
6320   sleep 100 ms
6330   let buzzer = 0
6340 endsub 
7000 rem ### toaster ###
7010 dim target, secs
7020 dim thermocouple as pin a8 for analog input
7030 dim relay as pin a0 for digital output
7040 dim buzzer as pin a6 for frequency output
7050 data 512, 90, 746, 105, 894, 20, -1, -1
7060 configure timer 0 for 1 s
7070 configure timer 1 for 1 s
7080 on timer 0 do gosub adjust
7090 on timer 1 do gosub beep
7100 while target!=-1 do
7110   sleep secs s
7120   read target, secs
7130 endwhile 
7140 off timer 0
7150 off timer 1
7160 let relay = 0
7170 let buzzer = 100
7180 sleep 1 s
7190 let buzzer = 0
7200 end 
7210 sub adjust
7220   if thermocouple>=target then
7230     let relay = 0
7240   else 
7250     let relay = 1
7260   endif 
7270 endsub 
7280 sub beep
7290   let buzzer = thermocouple
7300   sleep 100 ms
7310   let buzzer = target
7320   sleep 100 ms
7330   let buzzer = 0
7340 endsub 
8000 rem ### toaster ###
8010 dim target, secs
8020 dim thermocouple as pin a8 for analog input
8030 dim relay as pin a0 for digital output
8040 dim buzzer as pin a6 for frequency output
8050 data 512, 90, 746, 105, 894, 20, -1, -1
8060 configure timer 0 for 1 s
8070 configure timer 1 for 1 s
8080 on timer 0 do gosub adjust
8090 on timer 1 do gosub beep
8100 while target!=-1 do
8110   sleep secs s
8120   read target, secs
8130 endwhile 
8140 off timer 0
8150 off timer 1
8160 let relay = 0
8170 let buzzer = 100
8180 sleep 1 s
8190 let buzzer = 0
8200 end 
8210 sub adjust
8220   if thermocouple>=target then
8230     let relay = 0
8240   else 
8250     let relay = 1
8260   endif 
8270 endsub 
8280 sub beep
8290   let buzzer = thermocouple
8300   sleep 100 ms
8310   let buzzer = target
8320   sleep 100 ms
8330   let buzzer = 0
8340 endsub 
9000 rem ### toaster ###
9010 dim target, secs
9020 dim thermocouple as pin a8 for analog input
9030 dim relay as pin a0 for digital output
9040 dim buzzer as pin a6 for frequency output
9050 data 512, 90, 746, 105, 894, 20, -1, -1
9060 configure timer 0 for 1 s
9070 configure timer 1 for 1 s
9080 on timer 0 do gosub adjust
9090 on timer 1 do gosub beep
9100 while target!=-1 do
9110   sleep secs s
9120   read target, secs
9130 endwhile 
9140 off timer 0
9150 off timer 1
9160 let relay = 0
9170 let buzzer = 100
9180 sleep 1 s
9190 let buzzer = 0
9200 end 
9210 sub adjust
9220   if thermocouple>=target then
9230     let relay = 0
9240   else 
9250     let relay = 1
9260   endif 
9270 endsub 
9280 sub beep
9290   let buzzer = thermocouple
9300   sleep 100 ms
9310   let buzzer = target
9320   sleep 100 ms
9330   let buzzer = 0
9340 endsub 
10000 rem ### toaster ###
10010 dim target, secs
10020 dim thermocouple as pin a8 for analog input
10030 dim relay as pin a0 for digital output
10040 dim buzzer as pin a6 for frequency output
10050 data 512, 90, 746, 105, 894, 20, -1, -1
10060 configure timer 0 for 1 s
10070 configure timer 1 for 1 s
10080 on timer 0 do gosub adjust
10090 on timer 1 do gosub beep
10100 while target!=-1 do
10110   sleep secs s
10120   read target, secs
10130 endwhile 
10140 off timer 0
10150 off timer 1
10160 let relay = 0
10170 let buzzer = 100
10180 sleep 1 s
10190 let buzzer = 0
10200 end 
10210 sub adjust
10220   if thermocouple>=target then
10230     let relay = 0
10240   else 
10250     let relay = 1
10260   endif 
10270 endsub 
10280 sub beep
10290   let buzzer = thermocouple
10300   sleep 100 ms
10310   let buzzer = target
10320   sleep 100 ms
10330   let buzzer = 0
10340 endsub 
11000 rem ### toaster ###
11010 dim target, secs
11020 dim thermocouple as pin a8 for analog input
11030 dim relay as pin a0 for digital output
11040 dim buzzer as pin a6 for frequency output
11050 data 512, 90, 746, 105, 894, 20, -1, -1
11060 configure timer 0 for 1 s
11070 configure timer 1 for 1 s
11080 on timer 0 do gosub adjust
11090 on timer 1 do gosub beep
11100 while target!=-1 do
11110   sleep secs s
11120   read target, secs
11130 endwhile 
11140 off timer 0
11150 off timer 1
11160 let relay = 0
11170 let buzzer = 100
11180 sleep 1 s
11190 let buzzer = 0
11200 end 
11210 sub adjust
11220   if thermocouple>=target then
11230     let relay = 0
11240   else 
11250     let relay = 1
11260   endif 
11270 endsub 
11280 sub beep
11290   let buzzer = thermocouple
11300   sleep 100 ms
11310   let buzzer = target
11320   sleep 100 ms
11330   let buzzer = 0
11340 endsub 
12000 rem ### toaster ###
12010 dim target, secs
12020 dim thermocouple as pin a8 for analog input
12030 dim relay as pin a0 for digital output
12040 dim buzzer as pin a6 for frequency output
12050 data 512, 90, 746, 105, 894, 20, -1, -1
12060 configure timer 0 for 1 s
12070 configure timer 1 for 1 s
12080 on timer 0 do gosub adjust
12090 on timer 1 do gosub beep
12100 while target!=-1 do
12110   sleep secs s
12120   read target, secs
12130 endwhile 
12140 off timer 0
12150 off timer 1
12160 let relay = 0
12170 let buzzer = 100
12180 sleep 1 s
12190 let buzzer = 0
12200 end 
12210 sub adjust
12220   if thermocouple>=target then
12230     let relay = 0
12240   else 
12250     let relay = 1
12260   endif 
12270 endsub 
12280 sub beep
12290   let buzzer = thermocouple
12300   sleep 100 ms
12310   let buzzer = target
12320   sleep 100 ms
12330   let buzzer = 0
12340 endsub 
13000 rem ### toaster ###
13010 dim target, secs
13020 dim thermocouple as pin a8 for analog input
13030 dim relay as pin a0 for digital output
13040 dim buzzer as pin a6 for frequency output
13050 data 512, 90, 746, 105, 894, 20, -1, -1
13060 configure timer 0 for 1 s
13070 configure timer 1 for 1 s
13080 on timer 0 do gosub adjust
13090 on timer 1 do gosub beep
13100 while target!=-1 do
13110   sleep secs s
13120   read target, secs
13130 endwhile 
13140 off timer 0
13150 off timer 1
13160 let relay = 0
13170 let buzzer = 100
13180 sleep 1 s
13190 let buzzer = 0
13200 end 
13210 sub adjust
13220   if thermocouple>=target then
13230     let relay = 0
13240   else 
13250     let relay = 1
13260   endif 
13270 endsub 
13280 sub beep
13290   let buzzer = thermocouple
13300   sleep 100 ms
13310   let buzzer = target
13320   sleep 100 ms
13330   let buzzer = 0
13340 endsub 
14000 rem ### toaster ###
14010 dim target, secs
14020 dim thermocouple as pin a8 for analog input
14030 dim relay as pin a0 for digital output
14040 dim buzzer as pin a6 for frequency output
14050 data 512, 90, 746, 105, 894, 20, -1, -1
14060 configure timer 0 for 1 s
14070 configure timer 1 for 1 s
14080 on timer 0 do gosub adjust
14090 on timer 1 do gosub beep
14100 while target!=-1 do
14110   sleep secs s
14120   read target, secs
14130 endwhile 
14140 off timer 0
14150 off timer 1
14160 let relay = 0
14170 let buzzer = 100
14180 sleep 1 s
14190 let buzzer = 0
14200 end 
14210 sub adjust
14220   if thermocouple>=target then
14230     let relay = 0
14240   else 
14250     let relay = 1
14260   endif 
14270 endsub 
14280 sub beep
14290   let buzzer = thermocouple
14300   sleep 100 ms
14310   let buzzer = target
14320   sleep 100 ms
14330   let buzzer = 0
14340 endsub 
15000 rem ### toaster ###
15010 dim target, secs
15020 dim thermocouple as pin a8 for analog input
15030 dim relay as pin a0 for digital output
15040 dim buzzer as pin a6 for frequency output
15050 data 512, 90, 746, 105, 894, 20, -1, -1
15060 configure timer 0 for 1 s
15070 configure timer 1 for 1 s
15080 on timer 0 do gosub adjust
15090 on timer 1 do gosub beep
15100 while target!=-1 do
15110   sleep secs s
15120   read target, secs
15130 endwhile 
15140 off timer 0
15150 off timer 1
15160 let relay = 0
15170 let buzzer = 100
15180 sleep 1 s
15190 let buzzer = 0
15200 end 
15210 sub adjust
15220   if thermocouple>=target then
15230     let relay = 0
15240   else 
15250     let relay = 1
15260   endif 
15270 endsub 
15280 sub beep
15290   let buzzer = thermocouple
15300   sleep 100 ms
15310   let buzzer = target
15320   sleep 100 ms
15330   let buzzer = 0
15340 endsub 
16000 rem ### toaster ###
16010 dim target, secs
16020 dim thermocouple as pin a8 for analog input
16030 dim relay as pin a0 for digital output
16040 dim buzzer as pin a6 for frequency output
16050 data 512, 90, 746, 105, 894, 20, -1, -1
16060 configure timer 0 for 1 s
16070 configure timer 1 for 1 s
16080 on timer 0 do gosub adjust
16090 on timer 1 do gosub beep
16100 while target!=-1 do
16110   sleep secs s
16120   read target, secs
16130 endwhile 
16140 off timer 0
16150 off timer 1
16160 let relay = 0
16170 let buzzer = 100
16180 sleep 1 s
16190 let buzzer = 0
16200 end 
16210 sub adjust
16220   if thermocouple>=target then
16230     let relay = 0
16240   else 
16250     let relay = 1
16260   endif 
16270 endsub 
16280 sub beep
16290   let buzzer = thermocouple
16300   sleep 100 ms
16310   let buzzer = target
16320   sleep 100 ms
16330   let buzzer = 0
16340 endsub 
17000 rem ### toaster ###
17010 dim target, secs
17020 dim thermocouple as pin a8 for analog input
17030 dim relay as pin a0 for digital output
17040 dim buzzer as pin a6 for frequency output
17050 data 512, 90, 746, 105, 894, 20, -1, -1
17060 configure timer 0 for 1 s
17070 configure timer 1 for 1 s
17080 on timer 0 do gosub adjust
17090 on timer 1 do gosub beep
17100 while target!=-1 do
17110   sleep secs s
17120   read target, secs
17130 endwhile 
17140 off timer 0
17150 off timer 1
17160 let relay = 0
17170 let buzzer = 100
17180 sleep 1 s
17190 let buzzer = 0
17200 end 
17210 sub adjust
17220   if thermocouple>=target then
17230     let relay = 0
17240   else 
17250     let relay = 1
17260   endif 
17270 endsub 
17280 sub beep
17290   let buzzer = thermocouple
17300   sleep 100 ms
17310   let buzzer = target
17320   sleep 100 ms
17330   let buzzer = 0
17340 endsub 
18000 rem ### toaster ###
18010 dim target, secs
18020 dim thermocouple as pin a8 for analog input
18030 dim relay as pin a0 for digital output
18040 dim buzzer as pin a6 for frequency output
18050 data 512, 90, 746, 105, 894, 20, -1, -1
18060 configure timer 0 for 1 s
18070 configure timer 1 for 1 s
18080 on timer 0 do gosub adjust
18090 on timer 1 do gosub beep
18100 while target!=-1 do
18110   sleep secs s
18120   read target, secs
18130 endwhile 
18140 off timer 0
18150 off timer 1
18160 let relay = 0
18170 let buzzer = 100
18180 sleep 1 s
18190 let buzzer = 0
18200 end 
18210 sub adjust
18220   if thermocouple>=target then
18230     let relay = 0
18240   else 
18250     let relay = 1
18260   endif 
18270 endsub 
18280 sub beep
18290   let buzzer = thermocouple
18300   sleep 100 ms
18310   let buzzer = target
18320   sleep 100 ms
18330   let buzzer = 0
18340 endsub 
19000 rem ### toaster ###
19010 dim target, secs
19020 dim thermocouple as pin a8 for analog input
19030 dim relay as pin a0 for digital output
19040 dim buzzer as pin a6 for frequency output
19050 data 512, 90, 746, 105, 894, 20, -1, -1
19060 configure timer 0 for 1 s
19070 configure timer 1 for 1 s
19080 on timer 0 do gosub adjust
19090 on timer 1 do gosub beep
19100 while target!=-1 do
19110   sleep secs s
19120   read target, secs
19130 endwhile 
19140 off timer 0
19150 off timer 1
19160 let relay = 0
19170 let buzzer = 100
19180 sleep 1 s
19190 let buzzer = 0
19200 end 
19210 sub adjust
19220   if thermocouple>=target then
19230     let relay = 0
19240   else 
19250     let relay = 1
19260   endif 
19270 endsub 
19280 sub beep
19290   let buzzer = thermocouple
19300   sleep 100 ms
19310   let buzzer = target
19320   sleep 100 ms
19330   let buzzer = 0
19340 endsub 
20000 rem ### toaster ###
20010 dim target, secs
20020 dim thermocouple as pin a8 for analog input
20030 dim relay as pin a0 for digital output
20040 dim buzzer as pin a6 for frequency output
20050 data 512, 90, 746, 105, 894, 20, -1, -1
20060 configure timer 0 for 1 s
20070 configure timer 1 for 1 s
20080 on timer 0 do gosub adjust
20090 on timer 1 do gosub beep
20100 while target!=-1 do
20110   sleep secs s
20120   read target, secs
20130 endwhile 
20140 off timer 0
20150 off timer 1
20160 let relay = 0
20170 let buzzer = 100
20180 sleep 1 s
20190 let buzzer = 0
20200 end 
20210 sub adjust
20220   if thermocouple>=target then
20230     let relay = 0
20240   else 
20250     let relay = 1
20260   endif 
20270 endsub 
20280 sub beep
20290   let buzzer = thermocouple
20300   sleep 100 ms
20310   let buzzer = target
20320   sleep 100 ms
20330   let buzzer = 0
20340 endsub 
21000 rem ### toaster ###
21010 dim target, secs
21020 dim thermocouple as pin a8 for analog input
21030 dim relay as pin a0 for digital output
21040 dim buzzer as pin a6 for frequency output
21050 data 512, 90, 746, 105, 894, 20, -1, -1
21060 configure timer 0 for 1 s
21070 configure timer 1 for 1 s
21080 on timer 0 do gosub adjust
21090 on timer 1 do gosub beep
21100 while target!=-1 do
21110   sleep secs s
21120   read target, secs
21130 endwhile 
21140 off timer 0
21150 off timer 1
21160 let relay = 0
21170 let buzzer = 100
21180 sleep 1 s
21190 let buzzer = 0
21200 end 
21210 sub adjust
21220   if thermocouple>=target then
21230     let relay = 0
21240   else 
21250     let relay = 1
21260   endif 
21270 endsub 
21280 sub beep
21290   let buzzer = thermocouple
21300   sleep 100 ms
21310   let buzzer = target
21320   sleep 100 ms
21330   let buzzer = 0
21340 endsub 
end
bad blocks
missing endwhile/next
mismatched endwhile/until/next
STOP at line 10!
missing endif
mismatched else
STOP at line 10!
mismatched elseif
STOP at line 10!
mismatched endif
STOP at line 10!
missing endwhile/next
mismatched endwhile/until/next
STOP at line 10!
missing endif
missing endif
mismatched elseif
STOP at line 20!
missing gosub
STOP at line 10!
missing gosub
STOP at line 10!
break/continue without while/for
STOP at line 10!
break/continue without while/for
STOP at line 20!
test negative run conditions
tick
2
yes
test long line trimming
   1 rem 0123456789012345678901234567890123456789012345678901234567890123456
  10 if 1 then
  20   if 1 then
  30     if 1 then
  40       if 1 then
  50         if 1 then
  60           if 1 then
  70             rem 012345678901234567890123456789012345678901234567890123456
  80           endif 
  90         endif 
 100       endif 
 110     endif 
 120   endif 
 130 endif 
end
   1 rem 0123456789012345678901234567890123456789012345678901234567890123456
  10 if 1 then
  20   if 1 then
  30     if 1 then
  40       if 1 then
  50         if 1 then
  60           if 1 then
  61             if 1 then
  70               rem 0123456789012345678901234567890123456789012345678901234
  71             endif 
  80           endif 
  90         endif 
 100       endif 
 110     endif 
 120   endif 
 130 endif 
end
test interrupt masking
  10 configure timer 0 for 500 ms
  20 on timer 0 do print "tick"
  30 sleep 750 ms
  40 mask timer 0
  50 sleep 2 s
  60 unmask timer 0
  70 sleep 250 ms
  80 off timer 0
 100 configure uart 1 for 300 baud 8 data no parity loopback
 110 dim tx as pin b8 for uart output
 120 dim rx as pin b6 for uart input
 140 on uart 1 input do print "rx", rx
 145 on uart 1 output do print "txed"
 150 let tx = 3
 160 sleep 500 ms
 170 mask uart 1 input
 180 let tx = 4
 190 sleep 500 ms
 200 print "unmasking"
 210 unmask uart 1 input
 220 sleep 500 ms
 230 off uart 1 input
 240 let tx = 5
 250 sleep 500 ms
 260 print "poll", rx
end
tick
tick
tick
unmasking
poll 0
test timers
   1 configure timer 0 for 3500 ms
   2 on timer 0 do gosub seven
   9 configure timer 1 for 1000 ms
  10 on timer 1 do print 2
  20 sleep 500 ms
  29 configure timer 2 for 2000 ms
  30 on timer 2 do print 4
  31 sleep 1 ms
  32 configure timer 3 for 2000000 us
  33 on timer 3 do print "t"
  40 sleep 5000 ms
  50 end 
  90 sub seven
 100   print "seven"
 110   return 
 120 endsub 
end
2
2
4
t
2
seven
2
4
t
2
test ticks/msec
   1 dim m, t
   2 let m = msecs, t = ticks
  10 print "ticks/msec:", ticks_per_msec
  20 configure timer 0 for 3000 ms
  30 on timer 0 do print "3000 ms timer at", msecs-m, "ms", ticks-t, "t"
  40 configure timer 1 for 1750000 us
  50 on timer 1 do print "1750000 us timer at", msecs-m, "ms", ticks-t, "t"
  90 sleep 10000 ms
 110 let ticks_per_msec = 1
end
ticks/msec: 4
1750000 us timer at 1750 ms 7000 t
3000 ms timer at 3000 ms 12000 t
1750000 us timer at 3500 ms 14000 t
1750000 us timer at 5250 ms 21000 t
3000 ms timer at 6000 ms 24000 t
1750000 us timer at 7000 ms 28000 t
1750000 us timer at 8750 ms 35000 t
3000 ms timer at 9000 ms 36000 t
var 'ticks_per_msec' undefined
STOP at line 110!
test time units
  10 sleep 1 s
  20 sleep 2*2 ms
  30 sleep 3000000 us
  40 configure timer 1 for 1 s
  50 configure timer 2 for 10 ms
  60 configure timer 3 for 100 us
end
      0ms other
   1000ms   10 sleep 1 s
      4ms   20 sleep 2*2 ms
   3000ms   30 sleep 3000000 us
end
test sub parameters
  10 print "sub params1"
  20 dim i
  30 assert i==0
  40 gosub f i
  50 assert i==1
  60 print "passed"
  70 end 
  80 sub f x
  90   let x = x+1
 100 endsub 
end
sub params1
passed
   5 print "sub params2"
  10 dim a
  20 let a = 7
  30 assert a==7&&ticks_per_msec==4
  40 gosub f a, 3, ticks_per_msec+0
  50 assert a==8&&ticks_per_msec==4
  60 let a = 12
  70 gosub f a+0, 3, 4
  80 assert a==12&&ticks_per_msec==4
  90 gosub f a, a, a
 100 assert a==2
 110 print "passed"
 120 end 
 130 sub f x, y, z
 140   print "f1:", x+y, z
 150   let x = 8
 160   let y = 9
 170   let z = 2
 180   print "f2:", x+y, z
 190 endsub 
end
sub params2
f1: 10 4
f2: 17 2
f1: 15 4
f2: 17 2
f1: 24 12
f2: 4 2
passed
   5 print "sub params2.1"
  10 dim a
  20 gosub foo a, a
  30 end 
  50 sub foo a, a
  60 endsub 
end
sub params2.1
var 'a' already declared at this scope
STOP at line 20!
   5 print "sub params3"
  20 assert ticks_per_msec==4
  30 gosub f ticks_per_msec+0
  40 assert ticks_per_msec==4
  50 print "passed"
  60 end 
  90 sub f x
 100   let x = x*2
 110   print x, ticks_per_msec
 120 endsub 
end
sub params3
8 4
passed
  10 print "sub params4"
  20 dim a[2]
  25 dim b[2]
  30 let a[0] = 5, a[1] = 6
  40 assert a[0]==5&&a[1]==6
  50 gosub f a[0]+0, a[1]
  60 assert a[0]==5&&a[1]==6
  70 gosub f2 a
  80 assert a[0]==6&&a[1]==7
  85 gosub foo a, b
  87 print a[0], b[1]
  88 assert a[0]==0&&b[1]==6
  90 print "passed"
 100 end 
 110 sub f x, y
 120   print "fa", x, y
 130   let x = x+1
 140   let y = y+1
 150   print "fb", x, y
 160 endsub 
 170 sub f2 z
 180   let z[0] = z[0]+1
 190   let z[1] = z[1]+1
 200 endsub 
 300 sub foo i, j
 310   if i>0 then
 320     let i = i-1
 330     let j[1] = j[1]+1
 340     gosub foo i, j
 350   endif 
 360 endsub 
end
sub params4
fa 5 6
fb 6 7
0 6
passed
  10 print "sub params - call with too many params1"
  20 gosub f
  30 print "ok"
  40 gosub f ticks_per_msec
  50 end 
  60 sub f
  70 endsub 
end
sub params - call with too many params1
ok
too many gosub parameters
STOP at line 40!
  10 print "sub params - call with too many params2"
  20 dim a
  30 gosub f ticks_per_msec+0
  40 print "ok"
  50 gosub f ticks_per_msec+0, a
  60 stop 
  70 sub f x
  80 endsub 
end
sub params - call with too many params2
ok
too many gosub parameters
STOP at line 50!
  10 print "sub pin params"
  20 dim p as pin b0 for digital output
  30 dim i
  40 for i = 1 to 10
  50   gosub flip p, i%i
  60 next 
  70 print "passed"
  80 end 
  90 sub flip o, v
 100   let o = v
 110 endsub 
end
sub pin params
passed
  10 print "sub param array by-ref"
  20 dim x[3], b[2]
  30 let x[0] = 1, x[1] = 2, x[2] = 3
  31 let b[0] = 11, b[1] = 1
  40 assert x[0]==1&&x[1]==2&&x[2]==3
  50 gosub f x
  60 assert x[0]==10&&x[1]==20&&x[2]==30
  70 print "pass1"
  75 gosub f b
  80 stop 
  90 sub f a
  95   print a[0]
 100   let a[0] = 10
 110   let a[1] = 20
 120   let a[2] = 30
 130 endsub 
end
sub param array by-ref
1
pass1
11
var 'a' index 2 out of range
STOP at line 120!
  10 print "sub param nested type error"
  20 dim a[2]
  30 gosub f a
  40 gosub f a[1]
  50 end 
  60 sub f x
  70   print "f", x
  80   gosub y x
  90 endsub 
 100 sub y p
 110   print "y", p[1]
 120 endsub 
end
sub param nested type error
f 0 0
y 0
f 0
var 'p' index 1 out of range
y 0
STOP at line 110!
  10 print "sub param with same-name local"
  20 dim a
  30 gosub f a
  40 stop 
  50 sub f x
  60   dim x[2]
  70 endsub 
end
sub param with same-name local
var 'x' already declared at this scope
STOP at line 60!
test demo
  10 rem ### blinky ###
  20 dim i
  30 dim led as pin e2 for digital output inverted
  40 while 1 do
  50   for i = 1 to 16
  60     let led = !led
  70     sleep 50 ms
  80   next 
  90   sleep 800 ms
 100 endwhile 
 110 end 
end
  10 rem ### uart isr ###
  20 dim data
  30 data 1, 1, 2, 3, 5, 8, 13, 21, 0
  40 configure uart 2 for 300 baud 8 data no parity loopback
  50 dim tx as pin b7 for uart output
  60 dim rx as pin b4 for uart input
  70 on uart 2 input do gosub receive
  80 on uart 2 output do gosub transmit
  90 sleep 1000 ms
 100 end 
 110 sub receive
 120   print "received", rx
 130 endsub 
 140 sub transmit
 150   read data
 160   if !data then
 170     return 
 180   endif 
 190   assert !tx
 200   print "sending", data
 210   let tx = data
 220 endsub 
end
  10 rem ### uart pio ###
  20 configure uart 1 for 9600 baud 7 data even parity loopback
  30 dim tx as pin b8 for uart output
  40 dim rx as pin b6 for uart input
  50 let tx = 3
  60 let tx = 4
  70 while tx do
  80 endwhile 
  90 print rx
 100 print rx
 110 print rx
 120 end 
end
0
0
0
  10 rem ### toaster ###
  20 dim target, secs
  30 dim thermocouple as pin a8 for analog input
  40 dim relay as pin a0 for digital output
  50 dim buzzer as pin a6 for frequency output
  60 data 512, 90, 746, 105, 894, 20, -1, -1
  70 configure timer 0 for 1 s
  80 configure timer 1 for 1 s
  90 on timer 0 do gosub adjust
 100 on timer 1 do gosub beep
 110 while target!=-1 do
 120   sleep 500 ms
 130   read target, secs
 140 endwhile 
 150 off timer 0
 160 off timer 1
 170 let relay = 0
 180 let buzzer = 100
 190 sleep 1 s
 200 let buzzer = 0
 210 end 
 220 sub adjust
 230   if thermocouple>=target then
 240     let relay = 0
 250   else 
 260     let relay = 1
 270   endif 
 280 endsub 
 290 sub beep
 300   let buzzer = thermocouple
 310   sleep 100 ms
 320   let buzzer = target
 330   sleep 100 ms
 340   let buzzer = 0
 350 endsub 
end
  10 rem ### toaster ###
  20 dim target, secs
  30 dim thermocouple as pin a8 for analog input
  40 dim relay as pin a0 for digital output
  50 dim buzzer as pin a6 for frequency output
  60 data 512, 90, 746, 105, 894, 20, -1, -1
  70 configure timer 0 for 1 s
  80 configure timer 1 for 1 s
  90 on timer 0 do gosub adjust
 100 on timer 1 do gosub beep
 110 while target!=-1 do
 120   sleep 500 ms
 130   read target, secs
    let target = 512
    let secs = 90
 140 endwhile 
 110 while target!=-1 do
 120   sleep 500 ms
 220 sub adjust
 230   if thermocouple>=target then
 240     let relay = 0
 250   else 
 260     let relay = 1
    let relay = 1
 270   endif 
 280 endsub 
 290 sub beep
 300   let buzzer = thermocouple
    let buzzer = 0
 310   sleep 100 ms
 320   let buzzer = target
    let buzzer = 512
 330   sleep 100 ms
 340   let buzzer = 0
    let buzzer = 0
 350 endsub 
 130   read target, secs
    let target = 746
    let secs = 105
 140 endwhile 
 110 while target!=-1 do
 120   sleep 500 ms
 130   read target, secs
    let target = 894
    let secs = 20
 140 endwhile 
 110 while target!=-1 do
 120   sleep 500 ms
 220 sub adjust
 230   if thermocouple>=target then
 240     let relay = 0
 250   else 
 260     let relay = 1
    let relay = 1
 270   endif 
 280 endsub 
 290 sub beep
 300   let buzzer = thermocouple
    let buzzer = 0
 310   sleep 100 ms
 320   let buzzer = target
    let buzzer = 894
 330   sleep 100 ms
 340   let buzzer = 0
    let buzzer = 0
 350 endsub 
 130   read target, secs
    let target = -1
    let secs = -1
 140 endwhile 
 110 while target!=-1 do
 120   sleep 500 ms
 130   read target, secs
 140 endwhile 
 150 off timer 0
 160 off timer 1
 170 let relay = 0
    let relay = 0
 180 let buzzer = 100
    let buzzer = 100
 190 sleep 1 s
 200 let buzzer = 0
    let buzzer = 0
 210 end 
